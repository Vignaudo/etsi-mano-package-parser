tosca_definitions_version: tosca_simple_yaml_1_1
  
metadata: 
  template_name:         tosca-normative-types
  template_author:       Netcracker
  template_version:      1.2.2
  template_date:         2017-09-24
  specification_name:    TOSCA normative type definitions
  specification_author:  TOSCA TC
  specification_version: 1.2_wd01_rev09 (not standard format)
  specification_date:    2017-06-13
  specification_source:  https://www.oasis-open.org/committees/download.php/60981/TOSCA-Simple-Profile-YAML-v1.2-wd01-rev09.docx

description: >
  The content of this file reflects "TOSCA Simple Profile in YAML", version 1.2-wd01-rev09. 
  It describes the definition for TOSCA types including Node Type, Relationship Type, Capability Type and Interfaces.

# Primitive Data Types are to be built in TOSCA Processor
# yaml:         string, integer, float, boolean, timestamp, null ('not supported')
# tosca:        version, range, list, map
# tosca.scalar: scalar-unit.size, scalar-unit.time, scalar-unit.frequency
data_types:
  tosca.datatypes.Root:
    description: This is the default (root) TOSCA Root Type definition that all complex TOSCA Data Types derive from.

  tosca.datatypes.Credential:
    derived_from: tosca.datatypes.Root
    description: The Credential type is a complex TOSCA data Type used when describing authorization credentials used to access network accessible resources.
    properties:
      protocol:
        description: The optional protocol name.
        type: string
        required: false
      token_type:
        description: The required token type.
        type: string
        default: password
      token:
        description: The required token used as a credential for authorization or access to a networked resource.
        type: string
      keys:
        description: The optional list of protocol-specific keys or assertions.
        type: map
        required: false
        entry_schema:
          type: string
      user:
        description: The optional user (name or ID) used for non-token based credentials.
        type: string
        required: false

  tosca.datatypes.TimeInterval:
    derived_from: tosca.datatypes.Root
    description: >
      The TimeInterval type is a complex TOSCA data Type used when describing a period of time using the YAML ISO 8601 format to declare the start and end times.
    properties:
      start_time:
        description: The inclusive start time for the time interval.
        type: timestamp
      end_time:
        description: The inclusive end time for the time interval.
        type: timestamp

  tosca.datatypes.network.NetworkInfo:
    derived_from: tosca.datatypes.Root
    description: The Network type is a complex TOSCA data type used to describe logical network information.
    properties:
      network_name:
        description: The name of the logical network. e.g., "public", "private", "admin". etc.
        type: string
      network_id:
        description: The unique ID of for the network generated by the network provider.
        type: string
      addresses:
        description: The list of IP addresses assigned from the underlying network.
        type: list
        entry_schema:
          type: string

  tosca.datatypes.network.PortInfo:
    derived_from: tosca.datatypes.Root
    description: The PortInfo type is a complex TOSCA data type used to describe network port information.
    properties:
      port_name:
        description: The logical network port name.
        type: string
      port_id:
        description: The unique ID for the network port generated by the network provider.
        type: string
      network_id:
        description: The unique ID for the network.
        type: string
      mac_address:
        description: The unique media access control address (MAC address) assigned to the port.
        type: string
      addresses:
        description: The list of IP address(es) assigned to the port.
        type: list
        entry_schema:
          type: string

  tosca.datatypes.network.PortDef:
    derived_from: integer
    description: The PortDef type is a TOSCA data Type used to define a network port.
    constraints:
      - in_range: [ 1, 65535 ]

  tosca.datatypes.network.PortSpec:
    derived_from: tosca.datatypes.Root
    description: >
      Used when describing port specifications for a network connection.
      A valid PortSpec MUST have:
      - at least one of the following properties: target, target_range, source or source_range.
      - a value for the source property that is within the numeric range specified by the property source_range when source_range is specified.
      - a value for the target property that is within the numeric range specified by the property target_range when target_range is specified.
    properties:
      protocol:
        description: The required protocol used on the port.
        type: string
        default: tcp
        constraints:
          - valid_values: [ udp, tcp, igmp ]
      target:
        description: The optional source port.
        type: tosca.datatypes.network.PortDef
        required: false
      target_range:
        description: The optional range for source port.
        type: range
        required: false
        constraints:
          - in_range: [ 1, 65535 ]
      source:
        description: The optional target port.
        type: tosca.datatypes.network.PortDef
        required: false
      source_range:
        description: The optional range for target port.
        type: range
        required: false
        constraints:
          - in_range: [ 1, 65535 ]

artifact_types:
  tosca.artifacts.Root:
    description: The TOSCA Artifact Type all other TOSCA Artifact Types derive from

  tosca.artifacts.File:
    derived_from: tosca.artifacts.Root
    description: >
      This artifact type is used when an artifact definition needs to have its associated file simply treated as a file and no special handling/handlers are invoked (i.e., it is not treated as either an implementation or deployment artifact type).

  tosca.artifacts.Deployment:
    derived_from: tosca.artifacts.Root
    description: >
      This artifact type represents the parent type for all deployment artifacts in TOSCA. This class of artifacts typically represents a binary packaging of an application or service that is used to install/create or deploy it as part of a nodeâ€™s lifecycle.

  tosca.artifacts.Deployment.Image:
    derived_from: tosca.artifacts.Deployment
    description: >
      This artifact type represents a parent type for any "image" which is an opaque packaging of a TOSCA Node's deployment (whether real or virtual) whose contents are typically already installed and pre-configured (i.e., "stateful") and prepared to be run on a known target container.

  tosca.artifacts.Deployment.Image.VM:
    derived_from: tosca.artifacts.Deployment.Image
    description: >
      This artifact represents the parent type for all Virtual Machine (VM) image and container formatted deployment artifacts. 
      These images contain a stateful capture of a machine (e.g., server) including operating system and installed software along with any 
      configurations and can be run on another machine using a hypervisor which virtualizes typical server (i.e., hardware) resources.
      Notes: Future drafts of this specification may include popular standard VM disk image
      (e.g., ISO, VMI, VMDX, QCOW2, etc.) and container (e.g., OVF, bare, etc.) formats.
      These would include consideration of disk formats such as:

  tosca.artifacts.Implementation:
    derived_from: tosca.artifacts.Root
    description: >
      This artifact type represents the parent type for all implementation artifacts in TOSCA.
      These artifacts are used to implement operations of TOSCA interfaces either directly (e.g., scripts) or indirectly (e.g., config. files).

  tosca.artifacts.Implementation.Bash:
    derived_from: tosca.artifacts.Implementation
    description: Script artifact for the Unix Bash shell
    mime_type: application/x-sh
    file_ext: [ sh ]

  tosca.artifacts.Implementation.Python:
    derived_from: tosca.artifacts.Implementation
    description: Artifact for the interpreted Python language
    mime_type: application/x-python
    file_ext: [ py ]

capability_types:
  tosca.capabilities.Root:
    description: This is the default (root) TOSCA Capability Type definition that all other TOSCA Capability Types derive from.

  tosca.capabilities.Node:
    derived_from: tosca.capabilities.Root
    description: The Node capability indicates the base capabilities of a TOSCA Node Type.

  tosca.capabilities.Compute:
    derived_from: tosca.capabilities.Root
    description: >
      The Compute capability, when included on a Node Type or Template definition, indicates that the node can provide hosting on a named compute resource.
    properties:
      name:
        description:  The otional name (or identifier) of a specific compute resource for hosting.
        type: string
        required: false
      num_cpus:
        description: Number of (actual or virtual) CPUs associated with the Compute node.
        type: integer
        required: false
        constraints:
          - greater_or_equal: 1
      cpu_frequency:
        description: >
          Specifies the operating frequency of CPU's core. 
          This property expresses the expected frequency of one (1) CPU as provided by the property "num_cpus".
        type: scalar-unit.frequency
        required: false
        constraints:
          - greater_or_equal: 0.1 GHz
      disk_size:
        description: Size of the local disk available to applications running on the Compute node (default unit is MB).
        type: scalar-unit.size
        required: false
        constraints:
          - greater_or_equal: 0 MB
      mem_size:
        description: Size of memory available to applications running on the Compute node (default unit is MB).
        type: scalar-unit.size
        required: false
        constraints:
          - greater_or_equal: 0 MB

  tosca.capabilities.Network:
    derived_from: tosca.capabilities.Root
    description: >
      The Network capability, when included on a Node Type or Template definition, indicates that the node can provide addressiblity for the resource a named network with the specified ports.
    properties:
      name:
        description: The otional name (or identifier) of a specific network resource.
        type: string
        required: false

  tosca.capabilities.Storage:
    derived_from: tosca.capabilities.Root
    description: >
      The Storage capability, when included on a Node Type or Template definition, indicates that the node can provide a named storage location with specified size range.
    properties:
      name:
        description: The otional name (or identifier) of a specific storage resource.
        type: string
        required: false

  tosca.capabilities.Container:
    derived_from: tosca.capabilities.Compute
    description: >
      The Container capability, when included on a Node Type or Template definition, indicates that the node can act as a container for (or a host for) one or more other declared Node Types.

  tosca.capabilities.Endpoint:
    derived_from: tosca.capabilities.Root
    description: >
      This is the default TOSCA type that should be used or extended to define a network endpoint capability. 
      This includes the information to express a basic endpoint with a single port or a complex endpoint with multiple ports.
      By default the Endpoint is assumed to represent an address on a private network unless otherwise specified.
    properties:
      protocol:
        description: >
          The name of the protocol (i.e., the protocol prefix) that the endpoint accepts (any OSI Layer 4-7 protocols)
          Examples: http, https, ftp, tcp, udp, etc.
        type: string
        default: tcp
      port:
        description: The optional port of the endpoint.
        type: tosca.datatypes.network.PortDef
        required: false
      secure:
        description: Requests for the endpoint to be secure and use credentials supplied on the ConnectsTo relationship.
        type: boolean
        required: false
        default: false
      url_path:
        description: The optional URL path of the endpointâ€™s address if applicable for the protocol.
        type: string
        required: false
      port_name:
        description: The optional name (or ID) of the network port this endpoint should be bound to.
        type: string
        required: false
      network_name:
        description: >
          The optional name (or ID) of the network this endpoint should be bound to.
          network_name: PRIVATE | PUBLIC |<network_name> | <network_id>
        type: string
        required: false
        default: PRIVATE
      initiator:
        description: The optional indicator of the direction of the connection.
        type: string
        required: false
        default: source
        constraints:
          - valid_values: [ source, target, peer ]
      ports:
        description: The optional map of ports the Endpoint supports (if more than one)
        type: map
        required: false
        constraints:
          - min_length: 1
        entry_schema:
          type: tosca.datatypes.network.PortSpec
    attributes:
      ip_address:
        description: This is the IP address as propagated up by the associated node's host (Compute) container.
        type: string

  tosca.capabilities.Endpoint.Public:
    derived_from: tosca.capabilities.Endpoint
    description: >
      This capability represents a public endpoint which is accessible to the general internet (and its public IP address ranges).
      This public endpoint capability also can be used to create a floating (IP) address that the underlying network assigns from a pool allocated from
      the applicationâ€™s underlying public network. This floating address is managed by the underlying network such that can be routed an applicationâ€™s
      private address and remains reliable to internet clients.
    properties:
      # Change the default network_name to use the first public network found
      network_name:
        type: string
        default: PUBLIC
        constraints:
          - equal: PUBLIC
      floating:
        description: >
          Indicates that the public address should be allocated from a pool of floating IPs that are associated with the network.
        type: boolean
        default: false
        status: experimental
      dns_name:
        description: The optional name to register with DNS
        type: string
        required: false
        status: experimental

  tosca.capabilities.Endpoint.Admin:
    derived_from: tosca.capabilities.Endpoint
    description: This is the default TOSCA type that should be used or extended to define a specialized administrator endpoint capability.
    properties:
      # Change Endpoint secure indicator to true from its default of false    
      secure:
        type: boolean
        default: true
        constraints:
          - equal: true

  tosca.capabilities.Endpoint.Database:
    derived_from: tosca.capabilities.Endpoint
    description: This is the default TOSCA type that should be used or extended to define a specialized database endpoint capability.

  tosca.capabilities.Attachment:
    derived_from: tosca.capabilities.Root
    description: >
      This is the default TOSCA type that should be used or extended to define an attachment capability of a (logical) infrastructure device node (e.g., BlockStorage node).

  tosca.capabilities.OperatingSystem:
    derived_from: tosca.capabilities.Root
    description: This is the default TOSCA type that should be used to express an Operating System capability for a node.
    # Note that the string values for the properties architecture, type and distribution SHALL
    # be normalized to lowercase by processors of the service template for matching purposes.
    # For example, if a "type" value is set to either "Linux", "LINUX" or "linux" in a service template,
    # the processor would normalize all three values to "linux" for matching purposes.
    properties:
      architecture:
        description: >
          The Operating System (OS) architecture.
          Examples of valid values include: x86_32, x86_64, etc.
        type: string
        required: false
      type:
        description: >
          The Operating System (OS) type.
          Examples of valid values include: linux, aix, mac, windows, etc.
        type: string
        required: false
      distribution:
        description: >
          The Operating System (OS) distribution.
          Examples of valid values for an "type" of "Linux" would include:
          debian, fedora, rhel and ubuntu.
        type: string
        required: false
      version:
        description: The Operating System version.
        type: version
        required: false

  tosca.capabilities.Scalable:
    derived_from: tosca.capabilities.Root
    description: This is the default TOSCA type that should be used to express a scalability capability for a node.
    # Notes: The actual number of instances for a node may be governed by a separate scaling policy
    # which conceptually would be associated to either a scaling-capable node or a group of nodes
    # in which it is defined to be a part of. This is a planned future feature of
    # the TOSCA Simple Profile and not currently described.
    properties:
      min_instances:
        description: >
          This property is used to indicate the minimum number of instances that should be created for the associated TOSCA Node Template by a TOSCA orchestrator.
        type: integer
        default: 1
      max_instances:
        description: >
          This property is used to indicate the maximum number of instances that should be created for the associated TOSCA Node Template by a TOSCA orchestrator.
        type: integer
        default: 1
      default_instances:
        description: >
          An optional property that indicates the requested default number of instances that should be the starting number of instances a TOSCA orchestrator should attempt to allocate.
          Note: The value for this property MUST be in the range between the values set for min_instances and max_instances properties.
        type: integer
        required: false
        # ISSUE: NETCRACKER SPECIFIC: default value        
        default: 1

  tosca.capabilities.network.Bindable:
    derived_from: tosca.capabilities.Node
    description: >
      A node type that includes the Bindable capability indicates that it can be bound to a logical network association via a network port.

  tosca.capabilities.network.Linkable:
    derived_from: tosca.capabilities.Node
    description: >
      A node type that includes the Linkable capability indicates that it can be pointed to by a tosca.relationships.network.LinksTo relationship type.

relationship_types:
  tosca.relationships.Root:
    description: The TOSCA root Relationship Type all other TOSCA base Relationship Types derive from
    attributes:
      tosca_id:
        description: A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.
        type: string
      tosca_name:
        description: >
          This attribute reflects the name of the Relationship Template as defined in the TOSCA service template.
          This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.
        type: string
      state:
        description: The state of the relationship instance.
        type: string
        default: initial
    interfaces:
      Configure:
        type: tosca.interfaces.relationship.Configure

  tosca.relationships.DependsOn:
    derived_from: tosca.relationships.Root
    description: This type represents a general dependency relationship between two nodes.
    valid_target_types: [ tosca.capabilities.Node ]

  tosca.relationships.HostedOn:
    derived_from: tosca.relationships.Root
    description: This type represents a hosting relationship between two nodes.
    valid_target_types: [ tosca.capabilities.Container ]

  tosca.relationships.ConnectsTo:
    derived_from: tosca.relationships.Root
    description: This type represents a network connection relationship between two nodes.
    valid_target_types: [ tosca.capabilities.Endpoint ]
    properties:
      credential:
        description: The security credential to use to present to the target endpoint to for either authentication or authorization purposes.
        type: tosca.datatypes.Credential
        required: false

  tosca.relationships.AttachesTo:
    derived_from: tosca.relationships.Root
    description: >
      This type represents an attachment relationship between two nodes. 
      For example, an AttachesTo relationship type would be used for attaching a storage node to a Compute node.
    valid_target_types: [ tosca.capabilities.Attachment ]
    properties:
      location:
        description: >
          The relative location (e.g., path on the file system), which provides the root location to address an attached node.
          e.g., a mount point / path such as '/usr/data'
          Note: The user must provide it and it cannot be "root".
        type: string
        constraints:
          - min_length: 1
      device:
        description: >
          The logical device name which for the attached device (which is represented by the target node in the model). e.g., '/dev/hda1'
        type: string
        required: false
    attributes:
      device:
        description: >
          The logical name of the device as exposed to the instance.
          Note: A runtime property that gets set when the model gets instantiated by the orchestrator.
        type: string
        required: false

  tosca.relationships.RoutesTo:
    derived_from: tosca.relationships.ConnectsTo
    description: This type represents an intentional network routing between two Endpoints in different networks.
    valid_target_types: [ tosca.capabilities.Endpoint ]

  tosca.relationships.network.LinksTo:
    derived_from: tosca.relationships.DependsOn
    description: >
      Represents an association relationship between Port and Network node types.
    valid_target_types: [ tosca.capabilities.network.Linkable ]

  tosca.relationships.network.BindsTo:
    derived_from: tosca.relationships.DependsOn
    description: >
      Represents a network association relationship between Port and Compute node types.
    valid_target_types: [ tosca.capabilities.network.Bindable ]

interface_types:
  tosca.interfaces.Root:
    description: The TOSCA root Interface Type all other TOSCA base Interface Types derive from.

  tosca.interfaces.node.lifecycle.Standard:
    derived_from: tosca.interfaces.Root
    description: This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.
    create:
      description: Standard lifecycle create operation.
    configure:
      description: Standard lifecycle configure operation.
    start:
      description: Standard lifecycle start operation.
    stop:
      description: Standard lifecycle stop operation.
    delete:
      description: Standard lifecycle delete operation.

  tosca.interfaces.relationship.Configure:
    derived_from: tosca.interfaces.Root
    description: The lifecycle interfaces define the essential, normative operation that each TOSCA Relationship Types may support.
    pre_configure_source:
      description: Operation to pre-configure the source endpoint.
    pre_configure_target:
      description: Operation to pre-configure the target endpoint.
    post_configure_source:
      description: Operation to post-configure the source endpoint.
    post_configure_target:
      description: Operation to post-configure the target endpoint.
    add_target:
      description: Operation to add a target node.
    remove_target:
      description: Operation to remove a target node.
    add_source:
      description: Operation to notify the target node of a source node which is now available via a relationship.
    target_changed:
      description: Operation to notify source some property or attribute of the target changed

node_types:
  tosca.nodes.Root:
    description: >
      The TOSCA Root Node Type is the default type that all other TOSCA base Node Types derive from.
      This allows for all TOSCA nodes to have a consistent set of features for modeling and management 
      (e.g., consistent definitions for requirements, capabilities and lifecycle interfaces). 
    attributes:
      tosca_id:
        description: A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.
        type: string
      tosca_name:
        description: >
          This attribute reflects the name of the Node Template as defined in the TOSCA service template.
          This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one
          or more instances (e.g., scaled) when orchestrated to a provider environment.
        type: string
      state:
        description: The state of the node instance.
        type: string
        default: initial
    requirements:
      - dependency:
          capability: tosca.capabilities.Node
          node: tosca.nodes.Root
          relationship: tosca.relationships.DependsOn
          occurrences: [ 0, UNBOUNDED ]
    capabilities:
      feature:
        type: tosca.capabilities.Node
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard

  tosca.nodes.Compute:
    derived_from: tosca.nodes.Root
    description: >
      The TOSCA Compute node represents one or more real or virtual processors of software applications or services along with other essential local resources.
      Collectively, the resources the compute node represents can logically be viewed as a (real or virtual) "server".
      Notes: The underlying implementation of the Compute node SHOULD have the ability to instantiate
      guest operating systems (either actual or virtualized) based upon the OperatingSystem capability
      properties if they are supplied in the a node template derived from the Compute node type.
    attributes:
      private_address:
        description: The primary private IP address assigned by the cloud provider that applications may use to access the Compute node.
        type: string
        # ISSUE: NETCRACKER SPECIFIC: OASIS defines true 
        required: false
      public_address:
        description: The primary public IP address assigned by the cloud provider that applications may use to access the Compute node.
        type: string
        # ISSUE: NETCRACKER SPECIFIC: OASIS defines true 
        required: false
      networks:
        description: The list of logical networks assigned to the compute host instance and information about them.
        type: map
        entry_schema:
          type: tosca.datatypes.network.NetworkInfo
        # ISSUE: NETCRACKER SPECIFIC: OASIS defines true 
        required: false
      ports:
        description: The list of logical ports assigned to the compute host instance and information about them.
        type: map
        entry_schema:
          type: tosca.datatypes.network.PortInfo
        # ISSUE: NETCRACKER SPECIFIC: OASIS defines true 
        required: false
    requirements:
      - local_storage:
          capability: tosca.capabilities.Attachment
          node: tosca.nodes.Storage.BlockStorage
          relationship: tosca.relationships.AttachesTo
          occurrences: [0, UNBOUNDED]
    capabilities:
      host:
        type: tosca.capabilities.Container
        valid_source_types: [ tosca.nodes.SoftwareComponent ]
      endpoint:
        type: tosca.capabilities.Endpoint.Admin
      os:
        type: tosca.capabilities.OperatingSystem
      scalable:
        type: tosca.capabilities.Scalable
      binding:
        type: tosca.capabilities.network.Bindable

  tosca.nodes.SoftwareComponent:
    derived_from: tosca.nodes.Root
    description: >
      The TOSCA SoftwareComponent node represents a generic software component that can be managed and run by a TOSCA Compute Node Type.
      Notes: Nodes that can directly be managed and run by a TOSCA Compute Node Type SHOULD extend from this type.
    properties:
      # domain-specific software component version
      component_version:
        description: The optional software component's version.
        type: version
        required: false
      admin_credential:
        description: The optional credential that can be used to authenticate to the software component.
        type: tosca.datatypes.Credential
        required: false
    requirements:
      - host:
          capability: tosca.capabilities.Container
          node: tosca.nodes.Compute
          relationship: tosca.relationships.HostedOn

  tosca.nodes.WebServer:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      This TOSCA WebServer Node Type represents an abstract software component or service that is capable of hosting and providing management operations
      for one or more WebApplication nodes.
      Notes: This node SHALL export both a secure endpoint capability (i.e., admin_endpoint), typically
      for administration, as well as a regular endpoint (i.e., data_endpoint) for serving data.
    capabilities:
      # Private, layer 4 endpoints
      data_endpoint: tosca.capabilities.Endpoint
      admin_endpoint: tosca.capabilities.Endpoint.Admin
      host:
        type: tosca.capabilities.Container
        valid_source_types: [ tosca.nodes.WebApplication ]

  tosca.nodes.WebApplication:
    derived_from: tosca.nodes.Root
    description: >
      The TOSCA WebApplication node represents a software application that can be managed and run by a TOSCA WebServer node.
      Specific types of web applications such as Java, etc. could be derived from this type.
    properties:
      context_root:
        description: The web application's context root which designates the application's URL path within the web server it is hosted on.
        type: string
        required: false
    requirements:
      - host:
          capability: tosca.capabilities.Container
          node: tosca.nodes.WebServer
          relationship: tosca.relationships.HostedOn
    capabilities:
      app_endpoint: 
        type: tosca.capabilities.Endpoint

  tosca.nodes.DBMS:
    derived_from: tosca.nodes.SoftwareComponent
    description: The TOSCA DBMS node represents a typical relational, SQL Database Management System software component or service.
    properties:
      root_password:
        description: The optional root password for the DBMS service
        type: string
        required: false
      port:
        description: The port the DBMS service will listen to for data and requests
        type: integer
        required: false
    capabilities:
      host:
        type: tosca.capabilities.Container
        valid_source_types: [ tosca.nodes.Database ]

  tosca.nodes.Database:
    derived_from: tosca.nodes.Root
    description: The TOSCA Database node represents a logical database that can be managed and hosted by a TOSCA DBMS node.
    properties:
      name:
        description: The logical name of the database
        type: string
      port:
        description: The port the underlying database service will listen to for data
        type: integer
        required: false
      user:
        description: The optional user account name for DB administration
        type: string
        required: false
      password:
        description: The optional password for the DB user account
        type: string
        required: false
    requirements:
      - host:
          capability: tosca.capabilities.Container
          node: tosca.nodes.DBMS
          relationship: tosca.relationships.HostedOn
    capabilities:
      database_endpoint:
        type: tosca.capabilities.Endpoint.Database

  tosca.nodes.Storage.ObjectStorage:
    derived_from: tosca.nodes.Root
    description: >
      The TOSCA ObjectStorage node represents storage that provides the ability to store data as objects (or BLOBs of data) without consideration for the underlying filesystem or devices.
      Notes: Subclasses of the tosca.nodes.ObjectStorage node type may impose further constraints on properties.
      For example, a subclass may constrain the (minimum or maximum) length of the 'name' property or
      include a regular expression to constrain allowed characters used in the 'name' property.
    properties:
      name:
        description: The logical name of the object store (or container).
        type: string
      size:
        description: The requested initial storage size (default unit is in Gigabytes).
        type: scalar-unit.size
        required: false
        constraints:
          - greater_or_equal: 0 GB
      maxsize:
        description: The requested maximum storage size (default unit is in Gigabytes).
        type: scalar-unit.size
        required: false
        constraints:
          - greater_or_equal: 0 GB
    capabilities:
      storage_endpoint:
        type: tosca.capabilities.Endpoint

  tosca.nodes.Storage.BlockStorage:
    derived_from: tosca.nodes.Root
    description: >
      The TOSCA BlockStorage node currently represents a server-local block storage device (i.e., not shared)
      offering evenly sized blocks of data from which raw storage volumes can be created.
      Notes: Distributed or Network Attached Storage (NAS) are not yet considere (nor are clustered file systems), but the TC plans to do so in future drafts.
      - Resize is of existing volumes is not considered at this time.
      - It is assumed that the volume contains a single filesystem that the operating system(that is hosting an associate application) can recognize and mount without additional information (i.e., it is operating system independent).
      - Currently, this version of the Simple Profile does not consider regions (or availability zones) when modeling storage.
    properties:
      size:
        description: >
          The requested storage size (default unit is MB). 
          Note:
          - Required when an existing volume (i.e., volume_id) is not available.
          - If volume_id is provided, size is ignored. Resize is of existing volumes is not considered at this time.
        type: scalar-unit.size
        constraints:
          - greater_or_equal: 1 MB
      volume_id:
        description: ID of an existing volume (that is in the accessible scope of the requesting application).
        type: string
        required: false
      snapshot_id:
        description: Some identifier that represents an existing snapshot that should be used when creating the block storage (volume).
        type: string
        required: false
    capabilities:
      attachment:
        type: tosca.capabilities.Attachment

  tosca.nodes.Container.Runtime:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      The TOSCA Container Runtime node represents operating system-level virtualization technology used to run multiple application services on a
      single Compute host.
    capabilities:
      host:
        type: tosca.capabilities.Container
      scalable:
        type: tosca.capabilities.Scalable

  tosca.nodes.Container.Application:
    derived_from: tosca.nodes.Root
    description: >
      The TOSCA Container Application node represents an application that requires Container-level virtualization technology.
    requirements:
      - host:
          capability: tosca.capabilities.Container
          node: tosca.nodes.Container.Runtime
          relationship: tosca.relationships.HostedOn
      - storage:
          capability: tosca.capabilities.Storage
      - network:
          capability: tosca.capabilities.Endpoint

  tosca.nodes.LoadBalancer:
    derived_from: tosca.nodes.Root
    description: >
      The TOSCA Load Balancer node represents logical function that be used in conjunction with a Floating Address to distribute an applicationâ€™s
      traffic (load) across a number of instances of the application (e.g., for a clustered or scaled application).
    properties:
      algorithm:
        type: string
        required: false
        status: experimental
    capabilities:
      client:
        type: tosca.capabilities.Endpoint.Public
        occurrences: [0, UNBOUNDED]
        description: The Floating (IP) client's on the public network can connect to
    requirements:
      - application:
          capability: tosca.capabilities.Endpoint
          relationship: tosca.relationships.RoutesTo
          occurrences: [0, UNBOUNDED]
          description: Connection to one or more load balanced applications

  tosca.nodes.network.Network:
    derived_from: tosca.nodes.Root
    description: >
      The TOSCA Network node represents a simple, logical network service.
    properties:
      ip_version:
        description: >
          The IP version of the requested network.
        type: integer
        required: false
        default: 4
        constraints:
          - valid_values: [ 4, 6 ]
      cidr:
        description: >
          The cidr block of the requested network.
        type: string
        required: false
      start_ip:
        description: >
           The IP address to be used as the first one in a pool of addresses
           derived from the cidr block full IP range
        type: string
        required: false
      end_ip:
        description: >
            The IP address to be used as the last one in a pool of addresses
            derived from the cidr block full IP range
        type: string
        required: false
      gateway_ip:
        description: >
           The gateway IP address.
        type: string
        required: false
      network_name:
        description: >
           An Identifier that represents an existing Network instance in the
           underlying cloud infrastructure â€“ OR â€“ be used as the name of the
           new created network.
           [-] If network_name is provided along with network_id
           they will be used to uniquely identify an existing network and not
           creating a new one, means all other possible properties are not allowed.
           [-] network_name should be more convenient for using. But in case that
           network name uniqueness is not guaranteed then one should provide
           a network_id as well.
        type: string
        required: false
      network_id:
        description: >
           An Identifier that represents an existing Network instance in the
           underlying cloud infrastructure. This property is mutually
           exclusive with all other properties except network_name.
           [-] Appearance of network_id in network template instructs the Tosca
           container to use an existing network instead of creating a new one.
           [-] network_name should be more convenient for using. But in case
           that network name uniqueness is not guaranteed then one
           should add a network_id as well.
           [-] network_name and network_id can be still used together
           to achieve both uniqueness and convenient.
        type: string
        required: false
      segmentation_id:
        description: >
           A segmentation identifier in the underlying cloud infrastructure
           (e.g., VLAN id, GRE tunnel id). If the segmentation_id is specified,
           the network_type or physical_network properties should be provided as well.
        type: string
        required: false
      network_type:
        description: >
           Optionally, specifies the nature of the physical network in the underlying
           cloud infrastructure. Examples are flat, vlan, gre or vxlan.
           For flat and vlan types, physical_network should be provided too.
        type: string
        required: false
      physical_network:
        description: >
           Optionally, identifies the physical network on top of which the network
           is implemented, e.g. physnet1. This property is required
           if network_type is flat or vlan.
        type: string
        required: false
      dhcp_enabled:
        description: >
          Indicates the TOSCA container to create a virtual network instance
          with or without a DHCP service.
        type: boolean
        required: false
        default: true
    attributes:
      segmentation_id:
        description: >
          The actual segmentation_id that is been assigned to
          the network by the underlying cloud infrastructure.
        type: string
        required: false
    capabilities:
      link:
        type: tosca.capabilities.network.Linkable

  tosca.nodes.network.Port:
    derived_from: tosca.nodes.Root
    description: >
      The TOSCA Port node represents a logical entity that associates between
      Compute and Network normative types. The Port node type effectively
      represents a single virtual NIC on the Compute node instance.
    properties:
      ip_address:
        description: >
          Allow the user to set a fixed IP address.
          Note that this address is a request to the provider which they will
          attempt to fulfill but may not be able to dependent on the network
          the port is associated with.
        type: string
        required: false
      order:
        description: >
          The order of the NIC on the compute instance (e.g. eth2).
          Note: when binding more than one port to a single compute (aka multi vNICs)
          and ordering is desired, it is *mandatory* that all ports will be set
          with an order value and. The order values must represent a positive,
          arithmetic progression that starts with 0 (e.g. 0, 1, 2, â€¦, n).
        type: integer
        required: false
        default: 0
        constraints:
          - greater_or_equal: 0
      is_default:
        description: >
          Set is_default=true to apply a default gateway route on the running
          compute instance to the associated network gateway.
          Only one port that is associated to single compute node can set as default=true.
        type: boolean
        required: false
        default: false
      ip_range_start:
        description: >
          Defines the starting IP of a range to be allocated for the compute
          instances that are associated by this Port.
          Without setting this property the IP allocation is done
          from the entire CIDR block of the network.
        type: string
        required: false
      ip_range_end:
        description: >
          Defines the ending IP of a range to be allocated for the compute
          instances that are associated by this Port.
          Without setting this property the IP allocation is done
          from the entire CIDR block of the network.
        type: string
        required: false
    attributes:
      ip_address:
        description: >
          The IP address would be assigned to the associated compute instance.
        type: string
        required: false
    requirements:
      - link:
          description: >
            Link requirement expresses the relationship between Port and Network
            nodes. It indicates which network this port will connect to.
          capability: tosca.capabilities.network.Linkable
          relationship: tosca.relationships.network.LinksTo
      - binding:
          description: >
            Binding requirement expresses the relationship between Port and
            Compute nodes. Effectively it indicates that the Port will be
            attached to specific Compute node instance
          capability: tosca.capabilities.network.Bindable
          relationship: tosca.relationships.network.BindsTo

group_types:
  tosca.groups.Root:
    description: The TOSCA Group Type all other TOSCA Group Types derive from.
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard

policy_types:
  tosca.policies.Root:
    description: The TOSCA Policy Type all other TOSCA Policy Types derive from.

  tosca.policies.Placement:
    derived_from: tosca.policies.Root
    description: The TOSCA Policy Type definition that is used to govern placement of TOSCA nodes or groups of nodes.

  tosca.policies.Scaling:
    derived_from: tosca.policies.Root
    description: The TOSCA Policy Type definition that is used to govern scaling of TOSCA nodes or groups of nodes.

  tosca.policies.Update:
    derived_from: tosca.policies.Root
    description: The TOSCA Policy Type definition that is used to govern update of TOSCA nodes or groups of nodes.

  tosca.policies.Performance:
    derived_from: tosca.policies.Root
    description: The TOSCA Policy Type definition that is used to declare performance requirements for TOSCA nodes or groups of nodes.