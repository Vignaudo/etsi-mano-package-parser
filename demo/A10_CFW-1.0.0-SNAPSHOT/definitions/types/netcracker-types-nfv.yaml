tosca_definitions_version: tosca_simple_yaml_1_1

imports:
  - types/tosca-types-nfv.yaml

metadata:
  template_name:    netcracker-types-nfv
  template_author:  Netcracker
  template_version: 1.5.0
  template_date:    2018-02-01

description: >
  This file provides the list of TOSCA type definitions specified by Netcracker for NFV domain.
  In future some or even all of these types could be moved to (contributed into)
  "TOSCA Simple Profile for Network Functions Virtualization" standard draft.

data_types:
  tosca.datatypes.nfv.vduLevel:
    derived_from: tosca.datatypes.Root
    properties:
      numberOfInstances:
        type: integer
        required: true

  tosca.datatypes.nfv.scaleInfo:
    derived_from: tosca.datatypes.Root
    properties:
      scaleLevel:
        type: integer
        required: true

  tosca.datatypes.nfv.allowed_address_pair:
    derived_from: tosca.datatypes.Root
    properties:
      ip:
        type: string
      mac:
        type: string
        required: false

  tosca.datatypes.nfv.bgp_community:
    derived_from: tosca.datatypes.Root
    properties:
      asn:
        type: integer
        description: autonomous system number
        constraints:
          - in_range: [ 1, 65534 ]
      value:
        type: integer
        description: community number
        constraints:
          - in_range: [ 1, 4294967295 ]

artifact_types:
  tosca.artifacts.Implementation.YAML:
    derived_from: tosca.artifacts.Implementation
    description: YAML artifact
    mime_type: text/yaml
    file_ext: [ yaml, yml ]

  tosca.artifacts.Implementation.Ansible:
    derived_from: tosca.artifacts.Implementation.YAML
    description: Common yaml artifact
    mime_type: text/yaml
    file_ext: [ yaml, yml, ansible ]
    properties:
      ansible_version:
        type: string
        required: false
        default: 2.2.1.0

  tosca.artifacts.Implementation.Ansible.Module:
    derived_from: tosca.artifacts.Implementation.Python
    description: Ansible custom module written in Python.

interface_types:
  tosca.interfaces.node.lifecycle.NFV:
    derived_from: tosca.interfaces.Root
    description: 
    heal:
      description: VNFC Heal operation.
    scale-in:
      description: VDU Scale-in operation.
    scale-out:
      description: VDU Scale-out operation.
    update:
      description: VDU Scale-out operation.
    migrate:
      description: VDU migrate operation.

capability_types:
  netcracker.capabilities.nfv.SF_Forwarder:
    derived_from: tosca.capabilities.Root

  netcracker.capabilities.nfv.SF_Group:
    derived_from: tosca.capabilities.Root

relationship_types:
  netcracker.relationships.nfv.SF_ForwardsTo:
    derived_from: tosca.relationships.Root
    valid_target_types: [ netcracker.capabilities.nfv.SF_Forwarder ]

  netcracker.relationships.nfv.SFG_Membership:
    derived_from: tosca.relationships.Root
    valid_target_types: [ netcracker.capabilities.nfv.SF_Group ]

node_types:
  netcracker.nodes.nfv.FP:
    derived_from: tosca.nodes.Root
    description: >
      The FP Node Type represents a Network Forwarding Path as defined by [ETSI GS NFV-MAN 001 v1.1.1], RFC-7665 Service Function Chains. Forwarding Path.
    properties:
       description:
         type: string
       name:
         type: string
       protocol:
         type: string
       stateful:
         type: boolean
       source_type:
         type: string
         constraints:
           - valid_values: [ VirtualLink, IPv4, IPv6, ip_any]
       source_target:
         type: string
         required: false
       source_ports:
         type: string
         default: any
       destination_type:
         type: string
         constraints:
           - valid_values: [ VirtualLink, IPv4, IPv6, ip_any]
       destination_target:
         type: string
         required: false
       destination_ports:
         type: string
         default: any
       action:
         type: string
         constraints:
           - valid_values: [ permit, deny ]
    requirements:
      - path_element:
          capability: netcracker.capabilities.nfv.SF_Forwarder
          relationship: netcracker.relationships.nfv.SF_ForwardsTo
          node: netcracker.nodes.nfv.SFG
          occurrences: [ 1, UNBOUNDED ]
      - source_target:
          capability: tosca.capabilities.Node
          relationship: tosca.relationships.DependsOn
          node: tosca.nodes.Root
          occurrences: [0,1]
      - destination_target:
          capability: tosca.capabilities.Node
          relationship: tosca.relationships.DependsOn
          node: tosca.nodes.Root
          occurrences: [0,1]
      - dependent_virtual_link:
          capability: tosca.capabilities.Node
          relationship: tosca.relationships.DependsOn
          node: tosca.nodes.Root
          occurrences: [ 1, UNBOUNDED ]

  netcracker.nodes.nfv.SF:
    derived_from: tosca.nodes.Root
    description: >
      The SF Node Type represents Service Functions that are responsible for specific treatment of received packets and used in Service Chaining that specifies the set of required SFs as well as the order in which they must be executed. RFC-7665 Service Function.
    requirements:
      - forwarder_left:
          capability: tosca.capabilities.nfv.Forwarder
          relationship: tosca.relationships.nfv.ForwardsTo
          node: tosca.nodes.nfv.Cpd
          occurrences: [1,1]
      - forwarder_right:
          capability: tosca.capabilities.nfv.Forwarder
          relationship: tosca.relationships.nfv.ForwardsTo
          node: tosca.nodes.nfv.Cpd
          occurrences: [1,1]
      - member_of:  
          capability: netcracker.capabilities.nfv.SF_Group
          relationship: netcracker.relationships.nfv.SFG_Membership
          node: netcracker.nodes.nfv.SFG
          occurrences: [ 1, 1 ]

  contrail.nodes.nfv.bgpaas:
    description: >
      Contrail BGPaaS
    derived_from: tosca.nodes.Root    
    properties:
      use_ipv4_mapped_ipv6_nexthop:
        type: boolean
      suppress_route_advertisments:
        type: boolean      
      autonomous_system:
        type: string      
      address_family:
        type: string
        constraints:
           - valid_values: [  ipv4, ipv6, ipv4and6 ]
      holdtime:
        type: string
        required: false        
    requirements:
      - interface_binding: 
          capability: tosca.capabilities.nfv.Forwarder
          relationship: tosca.relationships.nfv.ForwardsTo
          node: tosca.nodes.nfv.Cpd
          occurrences: [1,1]

# FIXME I think this type should be cleaned from contrail specific fields.
  netcracker.nodes.nfv.SFG:
    description: >
      Group of RFC-7665 Service Function 
    derived_from: tosca.nodes.Root
    properties:
      # ISSUE: Contrail specific
      service_mode:
        type: string
        required: false
        default: in-network
        constraints:
          - valid_values: [ in-network, in-network-nat, transparent]
      # ISSUE: Contrail specific
      service_type:
        type: string
        required: false
        default: firewall
        constraints:
          - valid_values: [ firewall, analyzer ]              
      # ISSUE: Contrail specific
      ha_mode:
        type: string   
        required: false
    capabilities:
      sf_group:
        type: netcracker.capabilities.nfv.SF_Group
        occurrences: [1,UNBOUNDED]
      sf_forwarder:
        type: netcracker.capabilities.nfv.SF_Forwarder
        occurrences: [1,UNBOUNDED]
      #ISSUE: Contrail specific
      forwarder_left:
        type: tosca.capabilities.nfv.Forwarder
      #ISSUE: Contrail specific
      forwarder_right:
        type: tosca.capabilities.nfv.Forwarder
    requirements:
      # ISSUE: Contrail specific
      - left_virtual_link:
          capability: tosca.capabilities.nfv.VirtualLinkable
          relationship: tosca.relationships.nfv.VirtualLinksTo
          node: tosca.nodes.nfv.NsVirtualLinkDesc
          # ISSUE: NETCRACKER SPECIFIC: occurrences
          occurrences: [0,1]      
      # ISSUE: Contrail specific value
      - right_virtual_link:
          capability: tosca.capabilities.nfv.VirtualLinkable
          relationship: tosca.relationships.nfv.VirtualLinksTo
          node: tosca.nodes.nfv.NsVirtualLinkDesc
          # ISSUE: NETCRACKER SPECIFIC: occurrences
          occurrences: [0,1]  
      # ISSUE: Contrail specific value, this requirement isn't necessary and should be removed.
      - other_virtual_link:
          capability: tosca.capabilities.nfv.VirtualLinkable
          relationship: tosca.relationships.nfv.VirtualLinksTo
          node: tosca.nodes.nfv.NsVirtualLinkDesc
          # ISSUE: NETCRACKER SPECIFIC: occurrences
          occurrences: [0,UNBOUNDED]          
        

  tosca.nodes.nfv.DF:
    derived_from: tosca.nodes.Root
    properties:
      deployment_flavour:
        type: string      
      instantiation_level:
        type: string

  tosca.nodes.nfv.nsDF:
    derived_from: tosca.nodes.Root
    properties:
      deployment_flavour:
        type: string      
      instantiation_level:
        type: string

  tosca.nodes.nfv.VnfExtCpd:
    derived_from: tosca.nodes.nfv.Cpd
    properties:
      virtual_network_interface_requirements:
        type: list
        entry_schema:
          type: tosca.datatypes.nfv.VirtualNetworkInterfaceRequirements
        required: false
    capabilities:
      forwarder:
        type: tosca.capabilities.nfv.Forwarder
        occurrences: [0,UNBOUNDED]
    requirements:
      - virtual_link:
          capability: tosca.capabilities.nfv.VirtualLinkable
          relationship: tosca.relationships.nfv.VirtualLinksTo
          occurrences: [1,1]
      - VduCpd_binding:
          capability: tosca.capabilities.nfv.VirtualBindable
          relationship: tosca.relationships.nfv.VirtualBindsTo
          node: tosca.nodes.nfv.VduCpd
          occurrences: [1,1]

  tosca.nodes.nfv.PnfExtCpd:
    derived_from: tosca.nodes.nfv.Cpd
    properties:
      address_data:
        type: list
        entry_schema:
          type: tosca.datatypes.nfv.AddressData
        required: false
        status: unsupported
    capabilities:
      forwarder:
        type: tosca.capabilities.nfv.Forwarder
        occurrences: [0,UNBOUNDED]
    requirements:
      - virtual_link:
          capability: tosca.capabilities.nfv.VirtualLinkable
          relationship: tosca.relationships.nfv.VirtualLinksTo
          occurrences: [1,1]

  tosca.nodes.nfv.sapd:
    derived_from: tosca.nodes.nfv.Cpd
    capabilities:
      virtual_link:
        type: tosca.capabilities.nfv.VirtualLinkable
        occurrences: [0,1]
      forwarder:
        type: tosca.capabilities.nfv.Forwarder
        occurrences: [0,UNBOUNDED]
    requirements:
      - virtual_link:
          capability: tosca.capabilities.nfv.VirtualLinkable
          relationship: tosca.relationships.nfv.VirtualLinksTo
          occurrences: [0,1]
      - external_virtual_link:
          capability: tosca.capabilities.nfv.VirtualLinkable
          relationship: tosca.relationships.nfv.VirtualLinksTo
          occurrences: [0,1]

  tosca.nodes.nfv.subCpd:
    derived_from: tosca.nodes.nfv.Cpd
    properties:
      pairScaling:
        type: boolean
      segmentation_id:
        type: string
    capabilities:
      virtual_link:
        type: tosca.capabilities.nfv.VirtualLinkable
        occurrences: [0,1]
      forwarder:
        type: tosca.capabilities.nfv.Forwarder
        occurrences: [0,UNBOUNDED]
    requirements:
      - virtual_link:
          capability: tosca.capabilities.nfv.VirtualLinkable
          relationship: tosca.relationships.nfv.VirtualLinksTo
          occurrences: [1,1]
      - subCpd_binding:
          capability: tosca.capabilities.nfv.Forwarder
          relationship: tosca.relationships.nfv.ForwardsTo
          node: tosca.nodes.nfv.Cpd
          occurrences: [1,1]

  tosca.nodes.nfv.DistributedNsVirtualLinkDesc:
    derived_from: tosca.nodes.nfv.NsVirtualLinkDesc

  tosca.nodes.nfv.NsVirtualLinkDesc:
    derived_from: tosca.nodes.Root
    properties:
      description:
        type: string
        required: false
      connectivity_type:
        type: tosca.datatypes.nfv.ConnectivityType
        required: true
      virtual_link_desc_provider:
        type: string
        required: false
      virtual_link_desc_version:
        type: string
        required: false
      test_access:
        type: list
        entry_schema:
          type: string
        required: false
      vl_flavours:
        type: map
        entry_schema:
          type: tosca.datatypes.nfv.VlFlavour
        required: false
    capabilities:
      #monitoring_parameters:
        # modeled as ad hoc (named) capabilities in node template
      virtual_link:
        type: tosca.capabilities.nfv.VirtualLinkable
        occurrences: [0,UNBOUNDED]

  tosca.nodes.nfv.pnfd:
    derived_from: tosca.nodes.Root  # Or should this be its own top - level type?
    description: >
      The NFV PNF Node Type represents a Physical Network Function as defined by [ETSI GS NFV-MAN 001 v1.1.1].
      It is the default type that all other PNF Node Types derive from.
      This allows for all PNF nodes to have a consistent set of features for modeling and management
      (e.g., consistent definitions for requirements, capabilities and lifecycle interfaces).
    properties:
      id:
        description: ID of this PNF
        type: string
        required: false
      vendor:
        description: name of the vendor who generate this PNF
        type: string
        required: false
      version:
        description: version of the software for this PNF
        type: version
        required: false

  tosca.nodes.nfv.vnfd:
    derived_from: tosca.nodes.Root  # Or should this be its own top - level type?
    description: >
      The NFV VNF Node Type represents a Virtual Network Function as defined by [ETSI GS NFV-MAN 001 v1.1.1].
      It is the default type that all other VNF Node Types derive from.
      This allows for all VNF nodes to have a consistent set of features for modeling and management
      (e.g., consistent definitions for requirements, capabilities and lifecycle interfaces).
    properties:
      vnfd_id: 
        description: >
         Identifier of this VNFD information element. This attribute shall be globally unique. 
         The format will be defined in the data model specification phase. 
        type: string
      vnfd_version:
        description: >
          Identifies the version of the VNFD.
        type: string
        required: false        
      vnf_provider:
        description: >
          Provider of the VNF and of the VNFD.
        type: string   
        required: false        
      vnf_product_name:
        description: >
          Name to identify the VNF Product. Invariant for the VNF Product lifetime.
        type: string
        required: false
      vnf_software_version:
        description: >
          Software version of the VNF. 
          This is changed when there is any change to the software that is included in the VNF Package.
        type: string
        required: false        
      deployment_flavour:
        description: >
          Describes specific DF(s) of a VNF with specific requirements for capacity and performance
        type: string
        required: false        
      instantiation_level:
        description: >
          Describes the various levels of resources that can be used to instantiate the VNF using this flavour.
          Examples: Small, Medium, Large.
        type: string
        required: false
      vnfm_info:
        description: >
          Identifies VNFM compatible with the VNF described in this version of the VNFD.
          This VNFM is handled as 3d party if its identifier is not equal to 'netcracker'.
          The case of multiple VNFMs per one VNFD is not supported.
        type: list
        entry_schema:
          type: string
        required: false

  tosca.nodes.nfv.nsd:
    derived_from: tosca.nodes.Root 
    description: >
      The NFV NS Node Type represents a Network Service as defined by [ETSI GS NFV-MAN 001 v1.1.1].
    properties:
      nsd_id:
        description: Identifier of this NSD information element
        type: string
        required: false
      nsd_invariant_id:
        description: Identifies an NSD in a version independent manner. It is invariant across versions of NSD.
        type: string
        required: false
      designer:
        description: Name of the designer who generates this NSD
        type: string
        required: false
      version:
        description: Version of this NSD
        type: version
        required: false
      nsd_name:
        description: Provides the human readable name of the NSD
        type: string
        required: false
      deployment_flavour:
        description: Identifies a DF within the scope of an NSD
        type: string
        required: false
      instantiation_level:
        description: Identifies a NS instantiation level within the scope of DF
        type: string
        required: false

group_types:
  tosca.groups.nfv.VnfdElementGroup:
    derived_from: tosca.groups.Root

  tosca.groups.nfv.affinityOrAntiAffinityGroup:
    derived_from: tosca.groups.Root
    properties:
      type:
        type: string
        constraints:
          - valid_values: [ AFFINITY, ANTI_AFFINITY ]
      scope:
        type: string
        constraints:
          - valid_values: [ NFVI_NODE, RESOURCE_ZONE, ZONE_GROUP, NFVI-POP ]

  # ISSUE: AntiAffinity, Affinity are like the split of unused affinityOrAntiAffinityGroup.
  # Why so? Due to workflow mappings?
  tosca.groups.nfv.AntiAffinity:
    derived_from: tosca.groups.Root
    description: Antiaffinity group
    properties:
      scope:
        type: string
        constraints:
          - valid_values: [ NFVI-node, Zone ]

  tosca.groups.nfv.Affinity:
    derived_from: tosca.groups.Root
    description: Affinity group
    properties:
      scope:
        type: string
        constraints:
          - valid_values: [ NFVI-node, Zone ]

policy_types:
  tosca.policy.scaling:
    derived_from: tosca.policies.Root
    description: Simple node autoscaling
    properties:
      min_instances:
        type: integer
      max_instances:
        type: integer
      default_instances:
        type: integer
    targets: [ tosca.nodes.nfv.nsd, tosca.nodes.nfv.vnfd ]

  tosca.policies.nfv.instantiationlevel:
    derived_from: tosca.policies.Root
    properties:
      description:
        type: string
        required: false
      isDefault:
        type: boolean
        default: false
      vduLevels:
        type: map
        entry_schema:
          type: tosca.datatypes.nfv.vduLevel
      scaleInfo:
        type: map
        entry_schema:
          type: tosca.datatypes.nfv.scaleInfo
        required: false          

  tosca.policies.nfv.scalingAspect:
    derived_from: tosca.policies.Root
    properties:
      name:
        type: string
      description:
        type: string      
        required: false        
      maxScaleLevel:
        type: integer
        required: true

  tosca.policies.nfv.SequentialProvisioning:
    derived_from: tosca.policies.Root
    description: Generic instruction to the sequential provisioning of node instances
    targets: [ tosca.nodes.nfv.VDU.Compute ]  

  tosca.policies.nfv.LocalAntiAffinity:
    derived_from: tosca.policies.nfv.SequentialProvisioning         #  derived from special policy
    description: Local antiaffinity rule
    properties:
      scope:
        type: string
        constraints:
          - valid_values: [ NFVI-node, Zone ]
    targets: [ tosca.nodes.nfv.VDU.Compute ]

  tosca.policies.nfv.LocalAffinity:
    derived_from: tosca.policies.nfv.SequentialProvisioning         #  derived from special policy
    description: Local affinity rule
    properties:
      scope:
        type: string
        constraints:
          - valid_values: [ NFVI-node, Zone ]
    targets: [ tosca.nodes.nfv.VDU.Compute ]