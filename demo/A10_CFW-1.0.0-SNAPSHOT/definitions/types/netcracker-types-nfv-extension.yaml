tosca_definitions_version: tosca_simple_yaml_1_1

imports: 
  - types/netcracker-types-nfv.yaml

metadata: 
  template_name:    netcracker-types-nfv-extension
  template_author:  Netcracker
  template_version: 1.5.0
  template_date:    2018-01-23

description: >
  This file provides the list of TOSCA type definitions specified by Netcracker for NFV domain as 
  extension of ones from "TOSCA Simple Profile for Network Functions Virtualization" standard draft.
  These definitions are considered to be too specific for Netcracker.
  
data_types:

#Contrail specific datatypes
  contrail.datatypes.nfv.allowed_address_pair:
    #FIXME Catalog shall validate if child type derived from unexistent type
    derived_from: tosca.datatypes.nfv.allowed_address_pair
    properties:
      mode:
        type: string
        required: false

  contrail.datatypes.nfv.route_prefix:
    derived_from: tosca.datatypes.Root
    properties:
      prefix:
        type: string
      community:
        type: list
        required: false
        entry_schema:
          type: string

  contrail.datatypes.nfv.health_check:
    derived_from: tosca.datatypes.Root
    properties:
      enabled:
        type: boolean
        description: Administratively enable or disable this health check
        default: true
      delay:
        type: integer
        description: Time in seconds at which health check is repeated
      expected_codes:
        type: list
        description: >
          In case monitor protocol is HTTP, expected return code for HTTP operations like 200 ok.
        entry_schema:
          type: string
        required: false
      health_check_type:
        type: string
        description: Health check type, currently only link-local and end-to-end are supported
        constraints:
          - valid_values: [ link-local, end-to-end ]
      monitor_type:
        type: string
        description: Protocol used to monitor health, currently only HTTP and ICMP(ping) are supported
        constraints:
          - valid_values: [ PING, HTTP ]
      timeout:
        type: integer
        description: Time in seconds to wait for response
      max_retries:
        type: integer
        description: Number of failures before declaring health bad
      http_method:
        type: string
        description: In case monitor protocol is HTTP, type of http method used like GET, PUT, POST etc
        required: false
        constraints:
          - valid_values: [ GET, POST, PUT ]
      url_path:
        type: string
        description: >
          In case monitor protocol is HTTP, URL to be used.
          In case of ICMP, ip address.
          Also keyword local-ip is possible.
        default: local-ip

  netcracker.datatypes.nfv.virtualComputelevels:
    derived_from: tosca.datatypes.Root
    properties:
      levels:
        type: list
        entry_schema: 
          type: string

  netcracker.datatypes.nfv.VirtualCpu.1:
    derived_from: tosca.datatypes.nfv.VirtualCpu
    properties:
      num_virtual_cpu:
        type: integer
        required: false
        default: 1
        constraints:
          - valid_values: [ 1 ]

  netcracker.datatypes.nfv.VirtualCpu.2:
    derived_from: tosca.datatypes.nfv.VirtualCpu
    properties:
      num_virtual_cpu:
        type: integer
        required: false
        default: 2
        constraints:
          - valid_values: [ 2 ]

  netcracker.datatypes.nfv.VirtualCpu.4:
    derived_from: tosca.datatypes.nfv.VirtualCpu
    properties:
      num_virtual_cpu:
        type: integer
        required: false
        default: 4
        constraints:
          - valid_values: [ 4 ]

  netcracker.datatypes.nfv.VirtualCpu.8:
    derived_from: tosca.datatypes.nfv.VirtualCpu
    properties:
      num_virtual_cpu:
        type: integer
        required: false
        default: 8
        constraints:
          - valid_values: [ 8 ]    

  netcracker.datatypes.nfv.VirtualMemory.512MB:
    derived_from: tosca.datatypes.nfv.VirtualMemory
    properties:
      virtual_mem_size:
        type: scalar-unit.size # Number
        required: false
        default:  512 MB
        constraints:
          - valid_values: [ 512 MB ]          

  netcracker.datatypes.nfv.VirtualMemory.2GB:
    derived_from: tosca.datatypes.nfv.VirtualMemory
    properties:
      virtual_mem_size:
        type: scalar-unit.size # Number
        required: false
        default:  2 GB
        constraints:
          - valid_values: [ 2 GB ]
          
  netcracker.datatypes.nfv.VirtualMemory.4GB:
    derived_from: tosca.datatypes.nfv.VirtualMemory
    properties:
      virtual_mem_size:
        type: scalar-unit.size # Number
        required: false
        default:  4 GB
        constraints:
          - valid_values: [ 4 GB ]

  netcracker.datatypes.nfv.VirtualMemory.6GB:
    derived_from: tosca.datatypes.nfv.VirtualMemory
    properties:
      virtual_mem_size:
        type: scalar-unit.size # Number
        required: false
        default:  6 GB
        constraints:
          - valid_values: [ 6 GB ]

  netcracker.datatypes.nfv.VirtualMemory.8GB:
    derived_from: tosca.datatypes.nfv.VirtualMemory
    properties:
      virtual_mem_size:
        type: scalar-unit.size # Number
        required: false
        default:  8 GB
        constraints:
          - valid_values: [ 8 GB ]

  netcracker.datatypes.nfv.VirtualMemory.16GB:
    derived_from: tosca.datatypes.nfv.VirtualMemory
    properties:
      virtual_mem_size:
        type: scalar-unit.size # Number
        required: false
        default:  16 GB
        constraints:
          - valid_values: [ 16 GB ]

artifact_types:
  netcracker.artifacts.Monitoring:
    derived_from: tosca.artifacts.Implementation
    file_ext: [JSON, YAML]
    properties: 
      monitoring_profile:
        description: Monitoring Profile name
        type: string

  netcracker.artifacts.license:
    # status: obsolete    
    derived_from: tosca.artifacts.Implementation 
    file_ext: [ YAML ]

  netcracker.artifacts.licensing.scripts:
    derived_from: tosca.artifacts.Implementation
    file_ext: 
      - TAR
      - GZ            
  
  netcracker.artifacts.licensing.license:
    derived_from: tosca.artifacts.Implementation
    file_ext: 
      - JSON  
      
  netcracker.artifacts.licensing.feature:
    derived_from: tosca.artifacts.Implementation
    file_ext: 
      - JSON  
      
  tosca.artifacts.prometheus.snmp_exporter:
    derived_from: tosca.artifacts.Implementation
    file_ext: 
      - JSON
      - YAML
      - yaml
      - yml
    properties:
      scrape_interval:
        type: string
        default:  30s
        required: false

  tosca.artifacts.prometheus.blackbox_exporter:
    derived_from: tosca.artifacts.Implementation
    file_ext: 
      - JSON
      - YAML
      - yaml
      - yml
    properties:
      scrape_interval:
        type: string
        default:  30s
        required: false

  tosca.artifacts.prometheus.cli_exporter:
    derived_from: tosca.artifacts.Implementation
    file_ext: 
      - JSON
      - YAML
      - yaml
      - yml
    properties:
      scrape_interval:
        type: string
        default:  30s
        required: false

  netcracker.artifacts.trap_listener:
    derived_from: tosca.artifacts.Implementation
    file_ext: 
      - YAML
      - yaml
      - yml

  tosca.artifacts.prometheus.rules:
    derived_from: tosca.artifacts.Implementation
    file_ext: 
      - rules
      - YAML
      - yaml
      - yml

  tosca.artifacts.prometheus.aggregations:
    derived_from: tosca.artifacts.Implementation
    file_ext:
      - rules
      - YAML
      - yaml
      - yml

  netcracker.artifacts.processing.rca.rules:
    derived_from: tosca.artifacts.Implementation
    file_ext: 
      - YAML
      - yaml

  netcracker.artifacts.processing.correlation.rules:
    derived_from: tosca.artifacts.Implementation
    file_ext: 
      - YAML
      - yaml

  netcracker.artifacts.nfv.SwImage.auxiliary:
    derived_from: tosca.artifacts.Root
    properties:
      name:
        type: string
      version:
        type: string
      checksum:
        type: string

interface_types:
  netcracker.interfaces.node.NetworkService:
    derived_from: tosca.interfaces.Root
    description: >
      This lifecycle interface defines the configuration on NS level that VNF, PNF and NS nodes may support.
    configure:  
      description: VDU configuration on NS level.   

  netcracker.interfaces.node.Monitoring: 
    derived_from: tosca.interfaces.Root
    description: >
      This lifecycle interface defines the monitoring operations that VDU and VNF nodes may support.
    set:
      description: Set to Monitoring create operation.
    suspend:
      description: Suspend Monitoring operation.
    resume:
      description: Resume Monitoring operation.
    delete:
      description: Delete from Monitoring operation.

  netcracker.interfaces.node.lifecycle.License:
    derived_from: tosca.interfaces.Root
    description: >
      This lifecycle interface defines the operations related with 
      License Management that VDU nodes may support.
    assign:
      description: Assign license to VDU.
    unassign:
      description: Unassign license from VDU.
    cleanup:
      description: Cleanup license from VDU.

  netcracker.interfaces.node.Security:
    derived_from: tosca.interfaces.Root
    description: >
      This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.
    create_acl:
      description: Create Security Groups
    delete_acl:
      description: Delete Security Groups  

capability_types:
  ## flavour   CPU      RAM     DISK
  #  m1.tiny     1   512 MB     1 GB
  #  m1.small    1     2 GB    20 GB
  #  m1.medium   2     4 GB    40 GB
  #  m1.large    4     8 GB    80 GB
  #  m1.xlarge   8    16 GB   160 GB
  ## vertical scaling levels/flavours
  #  m1.level1   2     4 GB    20 GB
  #  m1.level2   2     6 GB    20 GB
  #  m1.level3   2     8 GB    20 GB
  netcracker.capabilities.nfv.VirtualCompute.m1.tiny:
    derived_from: tosca.capabilities.nfv.VirtualCompute
    properties:
      flavour_id:
        type: string
        default: m1.tiny
        constraints:
          - valid_values: [ m1.tiny ]
        required: false          
      local_drive_size:
        type: scalar-unit.size 
        default:  1 GB
        constraints:
          - valid_values: [ 1 GB ]
        required: false          
      virtual_memory:
        type: netcracker.datatypes.nfv.VirtualMemory.512MB
      virtual_cpu:
        type: netcracker.datatypes.nfv.VirtualCpu.1

  netcracker.capabilities.nfv.VirtualCompute.m1.small:
    derived_from: tosca.capabilities.nfv.VirtualCompute
    properties:
      flavour_id:
        type: string
        default: m1.small
        constraints:
          - valid_values: [ m1.small ]
        required: false          
      local_drive_size:
        type: scalar-unit.size 
        default:  20 GB
        constraints:
          - valid_values: [ 20 GB ]
        required: false          
      virtual_memory:
        type: netcracker.datatypes.nfv.VirtualMemory.2GB
      virtual_cpu:
        type: netcracker.datatypes.nfv.VirtualCpu.1

  netcracker.capabilities.nfv.VirtualCompute.m1.medium:
    derived_from: tosca.capabilities.nfv.VirtualCompute
    properties:
      flavour_id:
        type: string
        default: m1.medium
        constraints:
          - valid_values: [ m1.medium ]
        required: false          
      local_drive_size:
        type: scalar-unit.size 
        default:  40 GB
        constraints:
          - valid_values: [ 40 GB ]
        required: false          
      virtual_memory:
        type: netcracker.datatypes.nfv.VirtualMemory.4GB
      virtual_cpu:
        type: netcracker.datatypes.nfv.VirtualCpu.2        

  netcracker.capabilities.nfv.VirtualCompute.m1.large:
    derived_from: tosca.capabilities.nfv.VirtualCompute
    properties:
      flavour_id:
        type: string
        default: m1.large
        constraints:
          - valid_values: [ m1.large ]
        required: false          
      local_drive_size:
        type: scalar-unit.size 
        default:  80 GB
        constraints:
          - valid_values: [ 80 GB ]
        required: false          
      virtual_memory:
        type: netcracker.datatypes.nfv.VirtualMemory.8GB
      virtual_cpu:
        type: netcracker.datatypes.nfv.VirtualCpu.4    

  netcracker.capabilities.nfv.VirtualCompute.m1.xlarge:
    derived_from: tosca.capabilities.nfv.VirtualCompute
    properties:
      flavour_id:
        type: string
        default: m1.xlarge
        constraints:
          - valid_values: [ m1.xlarge ]
        required: false          
      local_drive_size:
        type: scalar-unit.size
        default:  160 GB
        constraints:
          - valid_values: [ 160 GB ]
        required: false          
      virtual_memory:
        type: netcracker.datatypes.nfv.VirtualMemory.16GB
      virtual_cpu:
        type: netcracker.datatypes.nfv.VirtualCpu.8 

  netcracker.capabilities.nfv.VirtualCompute.m1.level1:
    derived_from: tosca.capabilities.nfv.VirtualCompute
    properties:
      flavour_id:
        type: string
        default: m1.level1
        constraints:
          - valid_values: [ m1.level1 ]
        required: false
      local_drive_size:
        type: scalar-unit.size
        default:  20 GB
        constraints:
          - valid_values: [ 20 GB ]
        required: false
      virtual_memory:
        type: netcracker.datatypes.nfv.VirtualMemory.4GB
      virtual_cpu:
        type: netcracker.datatypes.nfv.VirtualCpu.2

  netcracker.capabilities.nfv.VirtualCompute.m1.level2:
    derived_from: tosca.capabilities.nfv.VirtualCompute
    properties:
      flavour_id:
        type: string
        default: m1.level2
        constraints:
          - valid_values: [ m1.level2 ]
        required: false
      local_drive_size:
        type: scalar-unit.size
        default:  20 GB
        constraints:
          - valid_values: [ 20 GB ]
        required: false
      virtual_memory:
        type: netcracker.datatypes.nfv.VirtualMemory.6GB
      virtual_cpu:
        type: netcracker.datatypes.nfv.VirtualCpu.2

  netcracker.capabilities.nfv.VirtualCompute.m1.level3:
    derived_from: tosca.capabilities.nfv.VirtualCompute
    properties:
      flavour_id:
        type: string
        default: m1.level3
        constraints:
          - valid_values: [ m1.level3 ]
        required: false
      local_drive_size:
        type: scalar-unit.size
        default:  20 GB
        constraints:
          - valid_values: [ 20 GB ]
        required: false
      virtual_memory:
        type: netcracker.datatypes.nfv.VirtualMemory.8GB
      virtual_cpu:
        type: netcracker.datatypes.nfv.VirtualCpu.4

# relationship_types:

node_types:
  netcracker.nodes.nfv.VDU.Compute.auxiliary:
    derived_from: tosca.nodes.nfv.VDU.Compute
    properties:
      vc_image:
        type: string

  netcracker.nodes.nfv.VduCpd.auxiliary:
    derived_from: tosca.nodes.nfv.VduCpd

  netcracker.nodes.nfv.VnfExtCpd.auxiliary:
    derived_from: tosca.nodes.nfv.VnfExtCpd

  contrail.nodes.nfv.health_check:
    derived_from: tosca.nodes.Root
    requirements:
      - interface_binding:
          capability: tosca.capabilities.nfv.Forwarder
          relationship: tosca.relationships.nfv.ForwardsTo
          occurrences: [ 1, UNBOUNDED ]

  contrail.nodes.nfv.interface_route_table:
    derived_from: tosca.nodes.Root
    requirements:
      - interface_binding:
          capability: tosca.capabilities.nfv.Forwarder
          relationship: tosca.relationships.nfv.ForwardsTo
          occurrences: [ 1, UNBOUNDED ]

  contrail.nodes.nfv.interface_route_table.AR:
    derived_from: contrail.nodes.nfv.interface_route_table

  netcracker.nodes.nfv.subCpd.AR:
    derived_from: tosca.nodes.nfv.subCpd

  netcracker.nodes.nfv.VduCpd.AR:
    derived_from: tosca.nodes.nfv.VduCpd

  netcracker.nodes.nfv.VnfExtCpd.AR:
    derived_from: tosca.nodes.nfv.VnfExtCpd

group_types:
  netcracker.groups.nfv.vnffg:
    derived_from: tosca.groups.Root
    members: [ netcracker.nodes.nfv.FP ]

  netcracker.groups.nfv.VnfGroup:
    derived_from: tosca.groups.nfv.VnfdElementGroup
    interfaces:
      Monitoring:
        type: netcracker.interfaces.node.Monitoring
      Security:
        type: netcracker.interfaces.node.Security

  netcracker.groups.nfv.VnfGroup.auxiliary:
    derived_from: netcracker.groups.nfv.VnfGroup

policy_types:
  netcracker.policies.nfv.NsScalingAspect:
    derived_from: tosca.policies.Root
    properties:
       description:
         type: string
       name:
         type: string
       flavour:
         type: string
       instantiation_levels:
         type: list
         entry_schema: 
          type: string

  netcracker.policies.vnf.remove:
    derived_from: tosca.policies.Root
    description: Describes Orchestrator reaction to starting of VNF heal
    properties:
      operation_target:
        type: string

  netcracker.policies.vnf.add:
    derived_from: tosca.policies.Root
    description: Describes Orchestrator reaction to finishing of VNF heal
    properties:
      operation_target:
        type: string

  netcracker.policies.vnf.exclude_from_graph:
    derived_from: tosca.policies.Root
    description: Describes Orchestrator reaction to starting VNF heal
    properties:
      operation_target:
        type: string

  netcracker.policies.vnf.reactivate_configuration:
    derived_from: tosca.policies.Root
    description: Describes Orchestrator reaction to finishing VNF heal
    properties:
      operation_target:
        type: string

  netcracker.policies.vnf.return_to_graph:
    derived_from: tosca.policies.Root
    description: Describes Orchestrator reaction to completing VNF heal
    properties:
      operation_target:
        type: string

  netcracker.policies.autohealing:
    derived_from: tosca.policies.Root
    description: Root type for Netcracker threshold policies

  netcracker.policies.autoscaling:
    derived_from: tosca.policies.Root
    description: Root type for Netcracker threshold policies
    properties:
      operation_target:
        type: string
      operation:
        type: string
        
  netcracker.policies.autoscaling.vertical:
    derived_from: tosca.policies.Root
    properties:
      operation:
        type: string

  netcracker.policies.nfv.vertical.scale:
    derived_from: tosca.policies.Root
    properties:
      virtualComputes:
        type: map
        entry_schema:
          type: netcracker.datatypes.nfv.virtualComputelevels
