tosca_definitions_version: tosca_simple_yaml_1_1

metadata: 
  template_name:         tosca-types-nfv
  template_author:       Netcracker
  template_version:      1.1.1
  template_date:         2017-09-24
  specification_name:    TOSCA NFV type definitionss
  specification_author:  TOSCA TC
  specification_version: tosca-nfv-v1.0-csd04
  specification_date:    2017-05-11
  specification_source:  http://docs.oasis-open.org/tosca/tosca-nfv/v1.0/csd04/tosca-nfv-v1.0-csd04.html

description: >
  The content of this file reflects "TOSCA Simple Profile for Network Functions Virtualization", version 1.0-csd04. 
  It describes the definition for TOSCA types including Node Type, Relationship Type, Capability Type and Interfaces.

data_types:
  tosca.datatypes.nfv.AddressData:
    derived_from: tosca.datatypes.Root
    description: > 
      The AddressData type is a complex TOSCA data type used to describe AddressData information element as defined in [ETSI GS NFV-IFA 011], 
      it provides information on the addresses to be assigned to the connection point(s) instantiated from a Connection Point Descriptor.
    properties:  
      address_type:
        description: > 
          Describes the type of the address to be assigned to the connection point instantiated from the parent Connection Point Descriptor.
          The content type shall be aligned with the address type supported by the layerProtocol property of the parent Connection Point Descriptor.
        type: string
        required: true
        constraints:
          - valid_values: [ mac_address, ip_address ]
      l2_address_data:
        description: > 
          Provides the information on the MAC addresses to be assigned to the connection point(s) instantiated from the parent Connection Point Descriptor.
        type: tosca.datatypes.nfv.L2AddressData # empty in "GS NFV IFA011 V0.7.3"
        required: false
      l3_address_data:
        description: > 
          Provides the information on the IP addresses to be assigned to the connection point instantiated from the parent Connection Point Descriptor.
        type: tosca.datatypes.nfv.L3AddressData
        required: false

  tosca.datatypes.nfv.L2AddressData:
    derived_from: tosca.datatypes.Root
    properties:
      # ISSUE: NETCRACKER SPECIFIC: property definition
      mac_address_assignment:
        type: boolean
        required: true

  tosca.datatypes.nfv.L3AddressData:
    derived_from: tosca.datatypes.Root
    description: >
      The L3AddressData type is a complex TOSCA data type used to describe L3AddressData information element as defined in [ETSI GS NFV-IFA 011], 
      it provides the information on the IP addresses to be assigned to the connection point instantiated from the parent Connection Point Descriptor.
    properties:  
      ip_address_assignment:
        description: > 
          Specify if the address assignment is the responsibility of management and orchestration function or not.
          If it is set to True, it is the management and orchestration function responsibility.
        type: boolean
        required: true
      floating_ip_activated:
        description: Specify if the floating IP scheme is activated on the Connection Point or not. 
        type: boolean
        required: true
      ip_address_type:
        description: > 
          Define address type. The address type should be aligned with the address type supported by the layer_protocol properties of the parent VnfExtCpd
        type: string
        required: false
        constraints:
          - valid_values: [ ipv4, ipv6 ]
      number_of_ip_address:
        description: Minimum number of IP addresses to be assigned
        type: integer
        required: false

  tosca.datatypes.nfv.ConnectivityType:
    derived_from: tosca.datatypes.Root
    description: > 
      The TOSCA ConnectivityType type is a complex TOSCA data type used to describe ConnectivityType information element as defined in [ETSI GS NFV-IFA 011].
    properties:  
      layer_protocol:
        description: Identifies the protocol this VL gives access to (ethernet, mpls, odu2, ipv4, ipv6, pseudo_wire).
        type: string
        required: true
        constraints:
          # ISSUE: NETCRACKER SPECIFIC: enum values: gre, vxvlan        
          - valid_values: [ ethernet, mpls, odu2, ipv4, ipv6, pseudo_wire, gre, vxvlan ]
      flow_pattern:
        description: Identifies the flow pattern of the connectivity (Line, Tree, Mesh).
        type: string
        required: false

  tosca.datatypes.nfv.RequestedAdditionalCapability:
    derived_from: tosca.datatypes.Root
    description: RequestAdditionalCapability describes additional capability for a particular VDU.
    properties:
      #name:
        # key of containing map
      support_mandatory:
        description: Indicates whether the requested additional capability is mandatory for successful operation.
        type: boolean
        required: true
      min_requested_additional_capability_version:
        description: Identifies the minimum version of the requested additional capability.
        type: string
        required: false
      preferred_requested_additional_capability_version:
        description: Identifies the preferred version of the requested additional capability.
        type: string
        required: false
      requested_additional_capability_name:
        description: Identifies a requested additional capability for the VDU.
        type: string
        required: true
      target_performance_parameters:
        description: Identifies specific attributes, dependent on the requested additional capability type.
        type: map
        entry_schema:
          type: string
        required: true 

  tosca.datatypes.nfv.VirtualCpu:
    derived_from: tosca.datatypes.Root
    description: VirtualMemory describes virtual memory for a particular VDU.
    properties:
      cpu_architecture:
        description: CPU architecture type. Examples are x86, ARM.
        type: string
        required: false
      num_virtual_cpu:
        description: Number of virtual CPU's
        type: integer
        required: true
      virtual_cpu_clock:
        description: Minimum virtual CPU clock rate
        type: scalar-unit.frequency
        required: false
      virtual_cpu_oversubscription_policy:
        # ISSUE? Why not modeled as Policy
        description: core oversubscription policy
        type: string
        required: false
      virtual_cpu_pinning:
        description: The virtual CPU pinning configuration for the virtualized compute resource.
        type: tosca.datatypes.nfv.VirtualCpuPinning
        required: false

  tosca.datatypes.nfv.VirtualMemory:
    derived_from: tosca.datatypes.Root
    description: VirtualMemory describes virtual memory for a particular VDU.
    properties:
      virtual_mem_size:
        description: Amount of virtual memory.
        type: scalar-unit.size # Number
        required: true
      virtual_mem_oversubscription_policy:
        description: > 
          The memory core oversubscription policy in terms of virtual memory to physical memory on the platform.
          The cardinality can be 0 during the allocation request, if no particular value is requested.
        type: string
        required: false
      numa_enabled:
        description: >
          It specifies the memory allocation to be cognisant of the relevant process/core allocation.
          The cardinality can be 0 during the allocation request, if no particular value is requested.
        type: boolean
        required: false

  tosca.datatypes.nfv.VirtualNetworkInterfaceRequirements:
    derived_from: tosca.datatypes.Root
    description: >
      The VirtualNetworkInterfaceRequirements type is a complex TOSCA data type used to describe VirtualNetworkInterfaceRequirements information element as defined in [ETSI GS NFV-IFA 011], it provides the information to specify requirements on a virtual network interface realising the CPs instantiated from this CPD.
    properties:
      name:
        description: Provides a human readable name for the requirement.
        type: string
        required: false
      description:
        description: Provides a human readable description of the requirement.
        type: string
        required: false
      support_mandatory:
        description: Indicates whether fulfilling the constraint is mandatory (TRUE) for successful operation or desirable (FALSE).
        type: boolean
        required: true
      requirement:
        description: Specifies a requirement such as the support of SR-IOV, a particular data plane acceleration library, an API to be exposed by a NIC, etc.
        # ISSUE: NETCRACKER SPECIFIC: type is not yet specified in standard
        type: map
        entry_schema:
          type: string          
        required: true

  # NETCRACKER SPECIFIC DATA_TYPES (to be in standard)
  tosca.datatypes.nfv.Addresses:
    derived_from: tosca.datatypes.Root
    properties:  
      subnet:
        type: string
      ipAddresses:
        type: list
        entry_schema:
          type: string
      floatingIP:
        type: list
        entry_schema:
          type: string

  tosca.datatypes.nfv.LinkBitrateRequirements:
    derived_from: tosca.datatypes.Root
    properties:
      root:
        type: integer
        required: true
      leaf:
        type: integer
        required: false

  tosca.datatypes.nfv.qos:
    derived_from: tosca.datatypes.Root
    properties:
      latency:
        type: integer
        required: true
      packetDelayVariation:
        type: integer
        required: true
      packetLossRatio:
        type: integer
        required: false

  tosca.datatypes.nfv.VlFlavour:
    derived_from: tosca.datatypes.Root
    properties:
      bitrateRequirements:
        type: tosca.datatypes.nfv.LinkBitrateRequirements
        required: false 
      qos:
        type: tosca.datatypes.nfv.qos
        required: false

  tosca.datatypes.nfv.VirtualCpuPinning:
    derived_from: tosca.datatypes.Root
    properties:
      cpu_pinning_policy:
        type: string
        constraints:
          - valid_values: [ static, dynamic ]
        required: false
      cpu_pinning_map:
        type: map
        entry_schema:
          type: string
        required: false

  tosca.datatypes.nfv.VnfcConfigurableProperties:
    derived_from: tosca.datatypes.Root
    properties:
      additional_vnfc_configurable_properties:
        type: map
        entry_schema:
          type: string
        required: false

artifact_types:
  tosca.artifacts.nfv.SwImage:
    derived_from: tosca.artifacts.Deployment.Image
    properties:
      #id:
        # node name
      name:
        description: Name of this software image
        type: string
        required: true
      version:
        description: Version of this software image
        type: string
        required: true
      checksum:
        description: Checksum of the software image file
        type: string
        required: true
      container_format:
        description: The container format describes the container file format in which software image is provided
        type: string
        required: true
      disk_format:
        description: The disk format of a software image is the format of the underlying disk image
        type: string
        required: true
      min_disk:
        description: The minimal disk size requirement for this software image
        type: scalar-unit.size # Number
        required: true
      min_ram:
        description: The minimal RAM requirement for this software image
        type: scalar-unit.size # Number
        required: false
      size:
        description: The size of this software image
        type: scalar-unit.size # Number
        required: true
      sw_image:
        # Artifact Definition already has file / repository keys to define reference to Artifact !!!
        # ISSUE: NETCRACKER SPECIFIC: required = true in tosca-nfv-v1.0-csd04, but here 'false' is set
        description: A reference to the actual software image within VNF Package, or url
        type: string
        required: false
      operating_system:
        description: Identifies the operating system used in the software image
        type: string
        required: false
      supported_virtualisation_environments:
        description: Identifies the virtualization environments (e.g. hypervisor) compatible with this software image
        type: list
        entry_schema:
          type: string
        required: false

### YAML_MAPPING_NODE_EXPECTED. Value is expected to be a non-empty mapping node
# interface_types:

capability_types:
  tosca.capabilities.nfv.Metric:
    derived_from: tosca.capabilities.Endpoint
    description: >
      A node type that includes the Metric capability indicates that
      it can be monitored using an tosca.relationships.nfv.Monitor relationship type.

  tosca.capabilities.nfv.VirtualBindable:
    derived_from: tosca.capabilities.Node
    description: >
      A node type that includes the VirtualBindable capability indicates that it can be pointed by tosca.relationships.nfv.VirtualBindsTo relationship type.

  tosca.capabilities.nfv.VirtualCompute:
    derived_from: tosca.capabilities.Root
    properties:
      requested_additional_capabilities:
        type: map
        entry_schema:
           type: tosca.datatypes.nfv.RequestedAdditionalCapability
        required: false
      virtual_memory:
        type: tosca.datatypes.nfv.VirtualMemory
        required: false
      virtual_cpu:
        type: tosca.datatypes.nfv.VirtualCpu
        required: false

  # NETCRACKER SPECIFIC CAPABILITY_TYPES (to be in standard)
  tosca.capabilities.nfv.Forwarder:
    derived_from: tosca.capabilities.Root
    description: >
      A node type that includes the Forwarder capability indicates that it can be pointed by tosca.relationships.nfv.ForwardsTo relationship type.

  tosca.capabilities.nfv.VirtualLinkable:
    derived_from: tosca.capabilities.Node
    description: >
     A node type that includes the VirtualLinkable capability indicates that it can be pointed by tosca.relationships.nfv.VirtualLinksTo relationship type.

  tosca.capabilities.nfv.VirtualStorage:
    derived_from: tosca.capabilities.Attachment

relationship_types:
  tosca.relationships.nfv.Monitor:
    derived_from: tosca.relationships.ConnectsTo
    description: This relationship type represents an association relationship to the Metric capability of VDU node types.

  tosca.relationships.nfv.VirtualBindsTo:
    derived_from: tosca.relationships.DependsOn
    description: This relationship type represents an association relationship between VDU and CP node types.
    valid_target_types: [ tosca.capabilities.nfv.VirtualBindable ]

  # NETCRACKER SPECIFIC RELATIONSHIP_TYPES (to be in standard)
  tosca.relationships.nfv.ForwardsTo:
    derived_from: tosca.relationships.Root
    description: This relationship type represents a traffic flow between two connection point node types.  
    valid_target_types: [ tosca.capabilities.nfv.Forwarder ]

  tosca.relationships.nfv.VirtualLinksTo:
    derived_from: tosca.relationships.DependsOn
    description: This relationship type represents an association relationship between VNFs and VL node types.
    valid_target_types: [ tosca.capabilities.nfv.VirtualLinkable ]

  tosca.relationships.nfv.VDU.AttachedTo:
    derived_from: tosca.relationships.AttachesTo
    valid_target_types: [ tosca.capabilities.nfv.VirtualStorage ]

node_types:
  tosca.nodes.nfv.VDU.VirtualStorage: 
    derived_from: tosca.nodes.Root
    description: >
      The NFV VirtualStorage node type represents a virtual storage entity which it describes the deployment and operational behavior of a virtual storage resources, as defined by [ETSI NFV IFA011]. OPEN ISSUE: should NFV profile use the current storage model as described in YAML 1.1?
    properties:
      type_of_storage:
        description: Type of virtualized storage resource
        type: string
        required: true
        # constraints:
        #   - valid_values: [ block, object ]
      size_of_storage:
        description: Size of virtualized storage resource (in GB)
        type: scalar-unit.size
        required: true
      rdma_enabled:
        description: Indicate if the storage support RDMA
        type: boolean
        required: false
    capabilities:
      virtual_storage:
        type: tosca.capabilities.nfv.VirtualStorage
    artifacts:
      sw_image:
        description: Describes the software image which is directly loaded on the virtualization container realizing this virtual storage.
        # file is required by grammar for Artifact Definition (even under Node Type)
        file: 
        type: tosca.artifacts.Deployment.Image
        
  tosca.nodes.nfv.VDU.Compute:
    derived_from: tosca.nodes.Compute
    description: > 
      The TOSCA nfv.VDU.Compute node type represents the virtual compute part of a VDU entity which it mainly describes the deployment and operational behavior of a VNF component (VNFC), as defined by [ETSI NFV IFA011].
    properties:
      name:
        description: Human readable name of the Vdu
        type: string
        required: true
      description:
        description: Human readable description of the Vdu
        type: string
        required: true
      boot_order:
        description: > 
          The key indicates the boot index (lowest index defines highest boot priority). 
          The Value references a descriptor from which a valid boot device is created.
          e.g. VirtualStorageDescriptor from which a VirtualStorage instance is created. 
          If no boot order is defined the default boot order defined in the VIM or NFVI shall be used.
        type: list # explicit index (boot index) not necessary, contrary to IFA011
        entry_schema:
          type: string
        required: false
      nfvi_constraints:
        description: > 
          Describes constraints on the NFVI for the VNFC instance(s) created from this Vdu. 
          For example, aspects of a secure hosting environment for the VNFC instance that involve additional entities or processes.
          More software images can be attached to the virtualization container using virtual_storage.
        type: list
        entry_schema:
          type: string
        required: false
      configurable_properties:
         description: Describes the configurable properties of all VNFC instances based on this VDU.
         type: map
         entry_schema:
            type: tosca.datatypes.nfv.VnfcConfigurableProperties
         required: false 
    attributes:
      private_address:
        status: deprecated
      public_address:
        status: deprecated
      networks:
        status: deprecated
      ports:
        status: deprecated
    capabilities:
      virtual_compute:
        type: tosca.capabilities.nfv.VirtualCompute
      virtual_binding:
        type: tosca.capabilities.nfv.VirtualBindable
        occurrences: [1,UNBOUNDED]
      #monitoring_parameter:
        # modeled as ad hoc (named) capabilities in VDU node template
        # for example:
        #capabilities:
        #  cpu_load: tosca.capabilities.nfv.Metric
        # memory_usage: tosca.capabilities.nfv.Metric
      host: #Editor note: FFS. How this capabilities should be used in NFV Profile
        type: tosca.capabilities.Container
        valid_source_types: [ tosca.nodes.SoftwareComponent ]
        occurrences: [ 0, UNBOUNDED ]  
      endpoint:
        type: tosca.capabilities.Endpoint
        occurrences: [ 0, 0 ]
      os: 
        type: tosca.capabilities.OperatingSystem
        occurrences: [ 0, 0 ]
      scalable: #Editor note: FFS. How this capabilities should be used in NFV Profile
        type: tosca.capabilities.Scalable
      binding:
        type: tosca.capabilities.network.Bindable
        occurrences: [ 0, UNBOUNDED ]
    requirements:
      - virtual_storage:
          capability: tosca.capabilities.nfv.VirtualStorage
          relationship: tosca.relationships.nfv.VDU.AttachedTo
          node: tosca.nodes.nfv.VDU.VirtualStorage
          occurrences: [ 0, UNBOUNDED ]
      - local_storage: #For NFV Profile, this requirement is deprecated.
          capability: tosca.capabilities.nfv.VirtualStorage
          occurrences: [ 0, 0 ]  
    artifacts:
      # ISSUE: OASIS NFV Profile uses list grammar, which is not correct
      sw_image:
        description: Describes the software image which is directly loaded on the virtualization container realizing this virtual storage.
        file:
        type: tosca.artifacts.nfv.SwImage

  tosca.nodes.nfv.Cpd:
    derived_from: tosca.nodes.Root
    description: >
      The TOSCA nfv.Cpd node represents network connectivity to a compute resource or a VL as defined by [ETSI GS NFV-IFA 011].
      This is an abstract type used as parent for the various Cpd types.
    properties:
      layer_protocol:
        description: Identifies which protocol the connection point uses for connectivity purposes
        type: string
        constraints:
          # ISSUE: NETCRACKER SPECIFIC: enum values: gre, vxvlan
          - valid_values: [ ethernet, mpls, odu2, ipv4, ipv6, pseudo_wire, gre, vxvlan ]
        required: true
      role: #Name in ETSI NFV IFA011 v0.7.3 cpRole
        description: > 
          Identifies the role of the port in the context of the traffic flow patterns in the VNF or parent NS.
          For example a VNF with a tree flow pattern within the VNF will have legal cpRoles of ROOT and LEAF
        type: string
        # constraints:
        #   - valid_values: [ root, leaf ] 
        required: false
      description:
        description: Provides human-readable information on the purpose of the connection point (e.g. connection point for control plane traffic).
        type: string
        required: false
      address_data:
        description: Provides information on the addresses to be assigned to the connection point(s) instantiated from this Connection Point Descriptor.
        type: list
        entry_schema:
          type: tosca.datatypes.nfv.AddressData
        required: false
    attributes:
      # ISSUE: NETCRACKER SPECIFIC: attribute definition
      addresses:
        type: list
        entry_schema:
          type: tosca.datatypes.nfv.Addresses
          
  tosca.nodes.nfv.VduCpd:
    derived_from: tosca.nodes.nfv.Cpd
    description: >
      The TOSCA nfv.VduCpd node type represents a type of TOSCA Cpd node and describes network connectivity between a VNFC instance (based on this VDU) and an internal VL as defined by [ETSI GS NFV-IFA 011].
    properties:
      bitrate_requirement:
        description: Bitrate requirement on this connection point
        type: integer
        required: false
      virtual_network_interface_requirements:
        description: Specifies requirements on a virtual network interface realising the CPs instantiated from this CPD
        type: list
        entry_schema:
          type: tosca.datatypes.nfv.VirtualNetworkInterfaceRequirements
        required: false
    capabilities:
      # ISSUE: NETCRACKER SPECIFIC: capability definition
      VduCpd_binding:
        type: tosca.capabilities.nfv.VirtualBindable
    requirements:
      - virtual_link:
          capability: tosca.capabilities.nfv.VirtualLinkable
          relationship: tosca.relationships.nfv.VirtualLinksTo
          node: tosca.nodes.nfv.VnfVirtualLinkDesc
          # ISSUE: NETCRACKER SPECIFIC: occurrences
          occurrences: [0,1]
      - virtual_binding:
          capability: tosca.capabilities.nfv.VirtualBindable
          relationship: tosca.relationships.nfv.VirtualBindsTo
          node: tosca.nodes.nfv.VDU.Compute
          occurrences: [0,1]

  tosca.nodes.nfv.VnfVirtualLinkDesc:
    derived_from: tosca.nodes.Root
    description: The TOSCA nfv.VnfVirtualLinkDesc node type represents a logical internal virtual link as defined by [ETSI GS NFV-IFA 011].
    properties:
      connectivity_type:
        description: Specifies the protocol exposed by the VL and the flow pattern supported by the VL
        type: tosca.datatypes.nfv.ConnectivityType
        required: true
      description:
        description: Provides human-readable information on the purpose of the VL (e.g. control plane traffic)
        type: string
        required: false
      test_access:
        description: Test access facilities available on the VL (e.g. none, passive, monitoring, or active (intrusive) loopbacks at endpoints
        type: list
        entry_schema:
          type: string
        required: false
      vl_flavours:
        description: Describe a specific flavour of the VL with specific bitrate requirements
        type: map
        entry_schema:
          type: tosca.datatypes.nfv.VlFlavour
        required: false
    capabilities:
      #monitoring_parameters:
        # modeled as ad hoc (named) capabilities in node template
      # ISSUE: NETCRACKER SPECIFIC: "virtual_link" is to be renamed to "virtual_linkable" (like in tosca-nfv-v1.0-csd04)
      virtual_link:
        type: tosca.capabilities.nfv.VirtualLinkable
        occurrences: [0,UNBOUNDED]

# group_types:
# policy_types: