##########################################################################
# The content of this file reflects TOSCA NFV Profile in YAML version
# 1.0.0. It describes the definition for TOSCA NFV types including Node Type,
# Relationship Type, Capability Type and Interfaces.
##########################################################################
tosca_definitions_version: tosca_simple_profile_for_mec_1_0_0

##########################################################################
# Node Type.
# A Node Type is a reusable entity that defines the type of one or more
# Node Templates.
##########################################################################
data_types:
  tosca.datatypes.mec.SecurityInfo:
    derived_from: tosca.nodes.Root

  tosca.datatypes.mec.TransportDescriptor:
    derived_from: tosca.nodes.Root
    properties:
      type:
        type: string
        constraints:
          - valid_values: [ REST_HTTP, MB_TOPIC_BASED, MB_ROUTING, MB_PUBSUB, RPC, RPC_STREAMING, WEBSOCKET ]
      protocol:
        type: string
      version:
        type: string
      security:
        type: tosca.datatypes.mec.SecurityInfo

  tosca.datatypes.mec.TransportsSupported:
    derived_from: tosca.nodes.Root
    properties:
      transport:
        type: tosca.datatypes.mec.TransportDescriptor
      serializers:
        type: list
        entry_schema:
          type: string

  tosca.datatypes.mec.TransportsDependency:
    derived_from: tosca.nodes.Root
    properties:
      transport:
        type: tosca.datatypes.mec.TransportDescriptor
      serializers:
        type: list
        entry_schema:
          type: string
      labels:
        type: list
        entry_schema:
          type: string

  tosca.datatypes.FeatureDependency:
    derived_from: tosca.nodes.Root
    properties:
      name:
        type: string
      version:
        type: string


  tosca.datatypes.mec.TrafficFilter:
    derived_from: tosca.nodes.Root
    properties:
      src_address:
        type: list
        entry_schema:
          type: string
      dst_address:
        type: list
        entry_schema:
          type: string
      src_port:
        type: list
        entry_schema:
          type: string
      dst_port:
        type: list
        entry_schema:
          type: string
      ptotocol:
        type: list
        entry_schema:
          type: string
      tag:
        type: list
        entry_schema:
          type: string
      src_tunnel_address:
        type: list
        entry_schema:
          type: string
      dst_tunnel_address:
        type: list
        entry_schema:
          type: string
      src_tunnel_port:
        type: list
        entry_schema:
          type: string
      dst_tunnel_port:
        type: list
        entry_schema:
          type: string
      q_cl:
        type: string
      d_scp:
        type: string
      t_c:
        type: string

  tosca.datatypes.mec.TunnelInfo:
    derived_from: tosca.nodes.Root
    properties:
      tunnel_type:
        type: string
        constraints:
          - valid_values: [ gtp-u, gre ]
      tunnel_dst_address:
        type: string
      tunnel_src_address:
        type: string
      tunnel_specific_data:
        type: string

  tosca.datatypes.mec.InterfaceDescriptor:
    derived_from: tosca.nodes.Root
    properties:
      interface_type:
        type: string
        constraints:
          - valid_values: [ tunnel, mac, ip ]
      tunnel_info:
        type: tosca.datatypes.mec.TunnelInfo
      src_mac_address:
        type: string
      dst_mac_address:
        type: string
      dst_ip_address:
        type: string

  tosca.datatypes.mec.TrafficRuleDescriptor:
    derived_from: tosca.nodes.Root
    properties:
      traffic_rule_id:
        type: string
      filter_type:
        type: string
        constraints:
          - valid_values: [ flow, packet ]
      priority:
        type: integer
      traffic_filter:
        type: list
        entry_schema:
          type: tosca.datatypes.mec.TrafficFilter
      action:
        type: string
        constraints:
          - valid_values: [  DROP, FORWARD_DECAPSULATED, FORWARD_AS_IS, PASSTHROUGH, DUPLICATED_DECAPSULATED, DUPLICATE_AS_IS ]
    requirements:
      - dst_interface:
          capability: tosca.capabilities.mec.VirtualLinkable
          relationship: tosca.relationships.mec.VirtualLinksTo
          node: tosca.nodes.mec.VL
          occurrences: [ 0, 2 ]

  tosca.datatypes.mec.VDU:
    derived_from: tosca.nodes.Root
    properties:
      boot_order:
        type: list # explicit index (boot index) not necessary, contrary to IFA011
        description: References a node template name from which a valid boot device is created 
        required: false
        entry_schema:
          type: string
      nfvi_constraints:
        type: list
        description: Describes constraints on the NFVI for the VNFC instance(s) created from this VDU 
        required: false
        entry_schema:
          type: string
      monitoring_parameters:
        type: list
        description: Describes monitoring parameters applicable to a VNFC instantiated from this VDU
        required: false
        entry_schema: 
          type: tosca.datatypes.nfv.VnfcMonitoringParameter
      sw_image_data:
        type: tosca.datatypes.nfv.SwImageData
        description: Defines information related to a SwImage artifact used by this Vdu.Compute node 
        required: false # property is required when the node template has an associated artifact of type tosca.artifacts.nfv.SwImage and not required otherwise
      boot_data:
        type: string
        description: Contains a string or a URL to a file contained in the VNF package used to customize a virtualised compute resource at boot time. The bootData may contain variable parts that are replaced by deployment specific values before being sent to the VIM.
        required: false

  tosca.datatypes.mec.ServiceDescriptor:
    derived_from: tosca.policies.Root
    properties:
      ser_name:
        type: string
      ser_category:
        type: string # ???
      version:
        type: string
      transports_supported:
        type: tosca.datatypes.mec.TransportsSupported


  tosca.datatypes.mec.ServiceDependency:
    derived_from: tosca.policies.Root
    properties:
      ser_name:
        type: string
      ser_category:
        type: string # ???
      version:
        type: string
      ser_transport_dependencies:
        type: list
        entry_schema:
          type: tosca.datatypes.mec.TransportsDependency
      requested_permissions:
        type: list
        entry_schema:
          type: string # ???


node_types:
  tosca.nodes.mec.MEA:
    derived_from: tosca.nodes.Root   # Or should this be its own top - level type?
    properties:
      appd_id:
        type: string
        description: ID of this MEA
      app_provider:
        type: string
        description: Provider of the application and of the AppD.
      app_name:
        type: string
        description: Name to identify the MEC application.
      app_soft_version:
        type: version
        description: Identifies the version of software of the MEC application.
      appd_version:
        type: version
        description: Identifies the version of the application descriptor.
      mec_version:
        type: list
        description: Identifies version(s) of MEC system compatible with the MEC application described in this version of the AppD.
        entry_schema:
          type: string
      app_info_name:
        type: string
        description: Human readable name for the MEC application.
      app_description:
        type: string
        description: Human readable description of the MEC application.
      virtual_compute_descriptor:
        type: tosca.datatypes.mec.VDU
      app_latency:
        type: integer
      terminate_app_instance_op_config:
        type: tosca.datatypes.nfv.VnfTerminateOperationConfiguration
      change_app_instance_state_op_config:
        type: tosca.datatypes.nfv.VnfOperateOperationConfiguration
      optional_feature_dependencies:
        type: list
        entry_schema:
          type: tosca.datatypes.FeatureDependency
      required_feature_dependencies:
        type: list
        entry_schema:
          type: tosca.datatypes.FeatureDependency
    capabilities:
      virtual_compute:
        type: tosca.capabilities.nfv.VirtualCompute
        occurrences: [ 1, 1 ]
      virtual_binding:
        type: tosca.capabilities.nfv.VirtualBindable
        occurrences: [ 1, UNBOUNDED ]
    requirements:
      - virtual_link:
          capability: tosca.capabilities.mec.VirtualLinkable
          relationship: tosca.relationships.mec.VirtualLinksTo
          node: tosca.nodes.mec.VL
      - virtual_storage:
          capability: tosca.capabilities.nfv.VirtualStorage
          relationship: tosca.relationships.nfv.AttachesTo
          occurrences: [ 0, UNBOUNDED ]



  tosca.nodes.mec.VDU:
    derived_from: tosca.nodes.nfv.Vdu.Compute
    capabilities:
      high_availability:
        type: tosca.capabilities.mec.HA
      virtualbinding:
        type: tosca.capabilities.mec.VirtualBindable
      monitoring_parameter:
        type: tosca.capabilities.mec.Metric
    requirements:
      - high_availability:
          capability: tosca.capabilities.mec.HA
          relationship: tosca.relationships.mec.HA
          node: tosca.nodes.mec.VDU
          occurrences: [ 0, 1 ]

  tosca.nodes.mec.CP:
    derived_from: tosca.nodes.network.Port
    properties:
      type:
        type: string
        required: false
    requirements:
      - virtual_link:
          capability: tosca.capabilities.mec.VirtualLinkable
          relationship: tosca.relationships.mec.VirtualLinksTo
          node: tosca.nodes.mec.VL
      - virtual_binding:
          capability: tosca.capabilities.mec.VirtualBindable
          relationship: tosca.relationships.mec.VirtualBindsTo
          node: tosca.nodes.mec.VDU
    attributes:
      address:
        type: string

  tosca.nodes.mec.VL:
    derived_from: tosca.nodes.network.Network
    properties:
      vendor:
        type: string
        required: true
        description: name of the vendor who generate this VL
    capabilities:
      virtual_linkable:
        type: tosca.capabilities.mec.VirtualLinkable

  tosca.nodes.mec.VL.ELine:
    derived_from: tosca.nodes.mec.VL
    capabilities:
      virtual_linkable:
        type: tosca.capabilities.mec.VirtualLinkable
        occurrences: 2

  tosca.nodes.mec.VL.ELAN:
    derived_from: tosca.nodes.mec.VL

  tosca.nodes.mec.VL.ETree:
    derived_from: tosca.nodes.mec.VL

  tosca.nodes.mec.FP:
    derived_from: tosca.nodes.Root
    properties:
      policy:
        type: string
        required: false
        description: name of the vendor who generate this VL
    requirements:
      - forwarder:
          capability: tosca.capabilities.mec.Forwarder
          relationship: tosca.relationships.mec.ForwardsTo


##########################################################################
# Relationship Type.
# A Relationship Type is a reusable entity that defines the type of one
# or more relationships between Node Types or Node Templates.
##########################################################################

relationship_types:
  tosca.relationships.mec.VirtualLinksTo:
    derived_from: tosca.relationships.network.LinksTo
    valid_target_types: [ tosca.capabilities.mec.VirtualLinkable ]

  tosca.relationships.mec.VirtualBindsTo:
    derived_from: tosca.relationships.network.BindsTo
    valid_target_types: [ tosca.capabilities.mec.VirtualBindable ]

  tosca.relationships.mec.HA:
    derived_from: tosca.relationships.Root
    valid_target_types: [ tosca.capabilities.mec.HA ]

  tosca.relationships.mec.Monitor:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ tosca.capabilities.mec.Metric ]

  tosca.relationships.mec.ForwardsTo:
    derived_from: tosca.relationships.root
    valid_target_types: [ tosca.capabilities.mec.Forwarder]

##########################################################################
# Capability Type.
# A Capability Type is a reusable entity that describes a kind of
# capability that a Node Type can declare to expose.
##########################################################################

capability_types:
  tosca.capabilities.mec.VirtualLinkable:
    derived_from: tosca.capabilities.network.Linkable

  tosca.capabilities.mec.VirtualBindable:
    derived_from: tosca.capabilities.network.Bindable

  tosca.capabilities.mec.HA:
    derived_from: tosca.capabilities.Root
    valid_source_types: [ tosca.nodes.mec.VDU ]

  tosca.capabilities.mec.HA.ActiveActive:
    derived_from: tosca.capabilities.mec.HA

  tosca.capabilities.mec.HA.ActivePassive:
    derived_from: tosca.capabilities.mec.HA

  tosca.capabilities.mec.Metric:
    derived_from: tosca.capabilities.Root

  tosca.capabilities.mec.Forwarder:
    derived_from: tosca.capabilities.Root

policy_types:

  tosca.policies.mec.DnsRuleDescriptor:
    derived_from: tosca.policies.Root
    properties:
      dnsRuleId:
        type: string
      domain_name:
        type: string
      ip_address:
        type: string
      ip_address_type:
        type: string
        required: true
        constraints:
          - valid_values: [ ipv4, ipv6 ]
      ttl:
        type: integer


  tosca.policies.mec.AppServiceRequired:
    derived_from: tosca.datatypes.mec.ServiceDependency

  tosca.policies.mec.AppServiceOptional:
    derived_from: tosca.datatypes.mec.ServiceDependency

  tosca.policies.mec.AppServiceProduced:
    derived_from: tosca.datatypes.mec.ServiceDescriptor

  tosca.policies.mec.TrafficRuleDescriptor:
    derived_from: tosca.datatypes.mec.TrafficRuleDescriptor







